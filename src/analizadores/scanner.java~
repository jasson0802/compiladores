// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/analizadores/lexico.jflex

/*Esta es la seccion del usuario, aqui podemos agregar codigo java,
 esto se va a pegar al inicio del archivo del scanner que jflex genera
*/
package analizadores;

import java_cup.runtime.Symbol;
import analizadores.Util;



// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int CADENA = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\12\u2000\1\u2100\1\u2200\1\u2300\1\u2000\1\u2400"+
    "\1\u2500\2\u2000\31\u1100\1\u2600\121\u1100\1\u2700\4\u1100\1\u2800"+
    "\1\u1100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00\53\u1100"+
    "\1\u2f00\10\u3000\31\u2000\1\u1100\1\u3100\1\u3200\1\u1100\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00\1\u3b00"+
    "\1\u1100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\3\u2000"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u2000\1\u4b00\1\u2000\1\u4c00\1\u4d00\2\u2000\3\u1100"+
    "\1\u4e00\1\u4f00\1\u5000\12\u2000\4\u1100\1\u5100\17\u2000\2\u1100"+
    "\1\u5200\41\u2000\2\u1100\1\u5300\1\u5400\3\u2000\1\u5500\27\u1100"+
    "\1\u5600\2\u1100\1\u5700\45\u2000\1\u1100\1\u5800\1\u5900\11\u2000"+
    "\1\u5a00\24\u2000\1\u5b00\1\u5c00\1\u2000\1\u5d00\1\u5e00\1\u5f00"+
    "\1\u6000\2\u2000\1\u6100\5\u2000\1\u6200\7\u2000\1\u6300\1\u6400"+
    "\4\u2000\1\u6500\21\u2000\246\u1100\1\u6600\20\u1100\1\u6700\1\u6800"+
    "\25\u1100\1\u6900\34\u1100\1\u6a00\14\u2000\2\u1100\1\u6b00\u0b05\u2000"+
    "\1\u6c00\1\u6d00\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\5\1\13\1\5"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\12\24\1\25\1\26\1\27\1\30\1\31\1\32\1\5"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\12\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\12\1\52\1\53\1\54\1\55\1\56\2\12\1\57"+
    "\1\12\1\60\1\61\1\62\1\5\1\12\1\5\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\12\1\44\1\45\1\46\1\47\1\50\1\51\1\12"+
    "\1\52\1\53\1\54\1\55\1\56\2\12\1\57\1\12"+
    "\1\63\1\64\1\65\1\66\6\0\1\67\32\0\2\5"+
    "\4\12\4\5\1\12\2\5\1\0\7\5\1\12\4\5"+
    "\1\12\5\5\27\12\1\5\37\12\1\5\70\12\2\43"+
    "\115\12\1\53\u0142\12\4\5\14\12\16\5\5\12\7\5"+
    "\1\12\1\5\1\12\21\5\160\0\5\12\1\5\2\12"+
    "\2\5\4\12\1\5\1\12\6\5\1\12\1\5\3\12"+
    "\1\5\1\12\1\5\24\12\1\5\123\12\1\5\213\12"+
    "\1\5\5\0\2\5\246\12\1\5\46\12\2\5\1\12"+
    "\7\5\47\12\7\5\1\12\1\5\55\0\1\5\1\0"+
    "\1\5\2\0\1\5\2\0\1\5\1\0\10\5\33\12"+
    "\5\5\3\12\15\5\6\0\5\5\1\12\4\5\13\0"+
    "\1\5\1\0\3\5\53\12\37\0\4\5\2\12\1\0"+
    "\143\12\1\5\1\12\10\0\1\5\6\0\2\12\2\0"+
    "\1\5\4\0\2\12\12\0\3\12\2\5\1\12\17\5"+
    "\1\0\1\12\1\0\36\12\33\0\2\5\131\12\13\0"+
    "\1\12\16\5\12\0\41\12\11\0\2\12\4\5\1\12"+
    "\5\5\26\12\4\0\1\12\11\0\1\12\3\0\1\12"+
    "\5\0\22\5\31\12\3\0\4\5\13\12\65\5\25\12"+
    "\1\5\10\12\26\5\60\0\66\12\3\0\1\12\22\0"+
    "\1\12\7\0\12\12\2\0\2\5\12\0\1\5\20\12"+
    "\3\0\1\5\10\12\2\5\2\12\2\5\26\12\1\5"+
    "\7\12\1\5\1\12\3\5\4\12\2\5\1\0\1\12"+
    "\7\0\2\5\2\0\2\5\3\0\1\12\10\5\1\0"+
    "\4\5\2\12\1\5\3\12\2\0\2\5\12\0\4\12"+
    "\7\5\2\12\4\5\3\0\1\5\6\12\4\5\2\12"+
    "\2\5\26\12\1\5\7\12\1\5\2\12\1\5\2\12"+
    "\1\5\2\12\2\5\1\0\1\5\5\0\4\5\2\0"+
    "\2\5\3\0\3\5\1\0\7\5\4\12\1\5\1\12"+
    "\7\5\14\0\3\12\1\0\13\5\3\0\1\5\11\12"+
    "\1\5\3\12\1\5\26\12\1\5\7\12\1\5\2\12"+
    "\1\5\5\12\2\5\1\0\1\12\10\0\1\5\3\0"+
    "\1\5\3\0\2\5\1\12\17\5\2\12\2\0\2\5"+
    "\12\0\1\5\1\12\7\5\1\12\6\0\1\5\3\0"+
    "\1\5\10\12\2\5\2\12\2\5\26\12\1\5\7\12"+
    "\1\5\2\12\1\5\5\12\2\5\1\0\1\12\7\0"+
    "\2\5\2\0\2\5\3\0\10\5\2\0\4\5\2\12"+
    "\1\5\3\12\2\0\2\5\12\0\1\5\1\12\20\5"+
    "\1\0\1\12\1\5\6\12\3\5\3\12\1\5\4\12"+
    "\3\5\2\12\1\5\1\12\1\5\2\12\3\5\2\12"+
    "\3\5\3\12\3\5\14\12\4\5\5\0\3\5\3\0"+
    "\1\5\4\0\2\5\1\12\6\5\1\0\16\5\12\0"+
    "\11\5\1\12\6\5\4\0\1\5\10\12\1\5\3\12"+
    "\1\5\27\12\1\5\20\12\3\5\1\12\7\0\1\5"+
    "\3\0\1\5\4\0\7\5\2\0\1\5\3\12\5\5"+
    "\2\12\2\0\2\5\12\0\20\5\1\12\3\0\1\5"+
    "\10\12\1\5\3\12\1\5\27\12\1\5\12\12\1\5"+
    "\5\12\2\5\1\0\1\12\7\0\1\5\3\0\1\5"+
    "\4\0\7\5\2\0\7\5\1\12\1\5\2\12\2\0"+
    "\2\5\12\0\1\5\2\12\15\5\4\0\1\5\10\12"+
    "\1\5\3\12\1\5\51\12\2\0\1\12\7\0\1\5"+
    "\3\0\1\5\4\0\1\12\5\5\3\12\1\0\7\5"+
    "\3\12\2\0\2\5\12\0\12\5\6\12\2\5\2\0"+
    "\1\5\22\12\3\5\30\12\1\5\11\12\1\5\1\12"+
    "\2\5\7\12\3\5\1\0\4\5\6\0\1\5\1\0"+
    "\1\5\10\0\6\5\12\0\2\5\2\0\15\5\60\12"+
    "\1\0\2\12\7\0\4\5\10\12\10\0\1\5\12\0"+
    "\47\5\2\12\1\5\1\12\2\5\2\12\1\5\1\12"+
    "\2\5\1\12\6\5\4\12\1\5\7\12\1\5\3\12"+
    "\1\5\1\12\1\5\1\12\2\5\2\12\1\5\4\12"+
    "\1\0\2\12\6\0\1\5\2\0\1\12\2\5\5\12"+
    "\1\5\1\12\1\5\6\0\2\5\12\0\2\5\4\12"+
    "\40\5\1\12\27\5\2\0\6\5\12\0\13\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\2\0\10\12\1\5"+
    "\44\12\4\5\24\0\1\5\2\0\5\12\13\0\1\5"+
    "\44\0\11\5\1\0\71\5\53\12\24\0\1\12\12\0"+
    "\6\5\6\12\4\0\4\12\3\0\1\12\3\0\2\12"+
    "\7\0\3\12\4\0\15\12\14\0\1\12\17\0\2\5"+
    "\46\12\1\5\1\12\5\5\1\12\2\5\53\12\1\5"+
    "\u014d\12\1\5\4\12\2\5\7\12\1\5\1\12\1\5"+
    "\4\12\2\5\51\12\1\5\4\12\2\5\41\12\1\5"+
    "\4\12\2\5\7\12\1\5\1\12\1\5\4\12\2\5"+
    "\17\12\1\5\71\12\1\5\4\12\2\5\103\12\2\5"+
    "\3\0\40\5\20\12\20\5\126\12\2\5\6\12\3\5"+
    "\u016c\12\2\5\21\12\1\5\32\12\5\5\113\12\3\5"+
    "\13\12\7\5\15\12\1\5\4\12\3\0\13\5\22\12"+
    "\3\0\13\5\22\12\2\0\14\5\15\12\1\5\3\12"+
    "\1\5\2\0\14\5\64\12\40\0\3\5\1\12\3\5"+
    "\2\12\1\0\2\5\12\0\41\5\4\0\1\5\12\0"+
    "\6\5\130\12\10\5\5\12\2\0\42\12\1\0\1\12"+
    "\5\5\106\12\12\5\37\12\1\5\14\0\4\5\14\0"+
    "\12\5\12\0\36\12\2\5\5\12\13\5\54\12\4\5"+
    "\32\12\6\5\12\0\46\5\27\12\5\0\4\5\65\12"+
    "\12\0\1\5\35\0\2\5\13\0\6\5\12\0\15\5"+
    "\1\12\10\5\16\0\102\5\5\0\57\12\21\0\7\12"+
    "\4\5\12\0\21\5\11\0\14\5\3\0\36\12\15\0"+
    "\2\12\12\0\54\12\16\0\14\5\44\12\24\0\10\5"+
    "\12\0\3\5\3\12\12\0\44\12\2\5\11\12\107\5"+
    "\3\0\1\5\25\0\4\12\1\0\4\12\3\0\2\12"+
    "\3\0\6\5\300\12\72\0\1\5\5\0\26\12\2\5"+
    "\6\12\2\5\46\12\2\5\6\12\2\5\10\12\1\5"+
    "\1\12\1\5\1\12\1\5\1\12\1\5\37\12\2\5"+
    "\65\12\1\5\7\12\1\5\1\12\3\5\3\12\1\5"+
    "\7\12\3\5\4\12\2\5\6\12\4\5\15\12\5\5"+
    "\3\12\1\5\7\12\16\5\5\0\30\5\2\3\5\0"+
    "\20\5\2\12\23\5\1\12\13\5\5\0\1\5\12\0"+
    "\1\5\1\12\15\5\1\12\20\5\15\12\3\5\40\12"+
    "\20\5\15\0\4\5\1\0\3\5\14\0\21\5\1\12"+
    "\4\5\1\12\2\5\12\12\1\5\1\12\3\5\5\12"+
    "\6\5\1\12\1\5\1\12\1\5\1\12\1\5\1\44"+
    "\3\12\1\5\13\12\2\5\4\12\5\5\5\12\4\5"+
    "\1\12\21\5\51\12\u0177\5\57\12\1\5\57\12\1\5"+
    "\205\12\6\5\4\12\3\0\2\12\14\5\46\12\1\5"+
    "\1\12\5\5\1\12\2\5\70\12\7\5\1\12\17\5"+
    "\1\0\27\12\11\5\7\12\1\5\7\12\1\5\7\12"+
    "\1\5\7\12\1\5\7\12\1\5\7\12\1\5\7\12"+
    "\1\5\7\12\1\5\40\0\57\5\1\12\325\5\3\12"+
    "\31\5\11\12\6\0\1\5\5\12\2\5\5\12\4\5"+
    "\126\12\2\5\2\0\2\5\3\12\1\5\132\12\1\5"+
    "\4\12\5\5\52\12\2\5\136\12\21\5\33\12\65\5"+
    "\306\12\112\5\353\12\25\5\215\12\103\5\56\12\2\5"+
    "\15\12\3\5\20\12\12\0\2\12\24\5\57\12\1\0"+
    "\4\5\12\0\1\5\37\12\2\0\120\12\2\0\45\5"+
    "\11\12\2\5\147\12\2\5\44\12\1\5\10\12\77\5"+
    "\13\12\1\0\3\12\1\0\4\12\1\0\27\12\5\0"+
    "\20\5\1\12\7\5\64\12\14\5\2\0\62\12\22\0"+
    "\12\5\12\0\6\5\22\0\6\12\3\5\1\12\1\5"+
    "\1\12\2\5\12\0\34\12\10\0\2\5\27\12\15\0"+
    "\14\5\35\12\3\5\4\0\57\12\16\0\16\5\1\12"+
    "\12\0\6\5\5\12\1\0\12\12\12\0\5\12\1\5"+
    "\51\12\16\0\11\5\3\12\1\0\10\12\2\0\2\5"+
    "\12\0\6\5\27\12\3\5\1\12\3\0\62\12\1\0"+
    "\1\12\3\0\2\12\2\0\5\12\2\0\1\12\1\0"+
    "\1\12\30\5\3\12\2\5\13\12\5\0\2\5\3\12"+
    "\2\0\12\5\6\12\2\5\6\12\2\5\6\12\11\5"+
    "\7\12\1\5\7\12\1\5\53\12\1\5\12\12\12\5"+
    "\163\12\10\0\1\5\2\0\2\5\12\0\6\5\244\12"+
    "\14\5\27\12\4\5\61\12\4\5\u0100\3\156\12\2\5"+
    "\152\12\46\5\7\12\14\5\5\12\5\5\1\12\1\0"+
    "\12\12\1\5\15\12\1\5\5\12\1\5\1\12\1\5"+
    "\2\12\1\5\2\12\1\5\154\12\41\5\153\12\22\5"+
    "\100\12\2\5\66\12\50\5\15\12\3\5\20\0\20\5"+
    "\20\0\3\5\2\12\30\5\3\12\31\5\1\12\6\5"+
    "\5\12\1\5\207\12\2\5\1\0\4\5\1\12\13\5"+
    "\12\0\7\5\32\12\4\5\1\12\1\5\32\12\13\5"+
    "\131\12\3\5\6\12\2\5\6\12\2\5\6\12\2\5"+
    "\3\12\3\5\2\12\3\5\2\12\22\5\3\0\4\5"+
    "\14\12\1\5\32\12\1\5\23\12\1\5\2\12\1\5"+
    "\17\12\2\5\16\12\42\5\173\12\105\5\65\12\210\5"+
    "\1\0\202\5\35\12\3\5\61\12\17\5\1\0\37\5"+
    "\40\12\15\5\36\12\5\5\46\12\5\0\5\5\36\12"+
    "\2\5\44\12\4\5\10\12\1\5\5\12\52\5\236\12"+
    "\2\5\12\0\6\5\44\12\4\5\44\12\4\5\50\12"+
    "\10\5\64\12\234\5\67\12\11\5\26\12\12\5\10\12"+
    "\230\5\6\12\2\5\1\12\1\5\54\12\1\5\2\12"+
    "\3\5\1\12\2\5\27\12\12\5\27\12\11\5\37\12"+
    "\101\5\23\12\1\5\2\12\12\5\26\12\12\5\32\12"+
    "\106\5\70\12\6\5\2\12\100\5\1\12\3\0\1\5"+
    "\2\0\5\5\4\0\4\12\1\5\3\12\1\5\33\12"+
    "\4\5\3\0\4\5\1\0\40\5\35\12\3\5\35\12"+
    "\43\5\10\12\1\5\34\12\2\0\31\5\66\12\12\5"+
    "\26\12\12\5\23\12\15\5\22\12\156\5\111\12\67\5"+
    "\63\12\15\5\63\12\15\5\3\0\65\12\17\0\37\5"+
    "\12\0\17\5\4\0\55\12\13\0\2\5\1\0\22\5"+
    "\31\12\7\5\12\0\6\5\3\0\44\12\16\0\1\5"+
    "\12\0\20\5\43\12\1\0\2\5\1\12\11\5\3\0"+
    "\60\12\16\0\4\12\5\5\3\0\3\5\12\0\1\12"+
    "\1\5\1\12\43\5\22\12\1\5\31\12\14\0\6\5"+
    "\1\0\101\5\7\12\1\5\1\12\1\5\4\12\1\5"+
    "\17\12\1\5\12\12\7\5\57\12\14\0\5\5\12\0"+
    "\6\5\4\0\1\5\10\12\2\5\2\12\2\5\26\12"+
    "\1\5\7\12\1\5\2\12\1\5\5\12\2\5\1\0"+
    "\1\12\7\0\2\5\2\0\2\5\3\0\2\5\1\12"+
    "\6\5\1\0\5\5\5\12\2\0\2\5\7\0\3\5"+
    "\5\0\213\5\65\12\22\0\4\12\5\5\12\0\46\5"+
    "\60\12\24\0\2\12\1\5\1\12\10\5\12\0\246\5"+
    "\57\12\7\0\2\5\11\0\27\5\4\12\2\0\42\5"+
    "\60\12\21\0\3\5\1\12\13\5\12\0\46\5\53\12"+
    "\15\0\10\5\12\0\66\5\32\12\3\5\17\0\4\5"+
    "\12\0\u0166\5\100\12\12\0\25\5\2\12\12\0\50\12"+
    "\7\0\1\12\4\0\10\5\1\0\10\5\1\12\13\0"+
    "\50\12\2\5\4\12\20\0\46\5\71\12\7\5\11\12"+
    "\1\5\45\12\10\0\1\5\10\0\1\12\17\5\12\0"+
    "\30\5\36\12\2\5\26\0\1\5\16\0\111\5\7\12"+
    "\1\5\2\12\1\5\46\12\6\0\3\5\1\0\1\5"+
    "\2\0\1\5\7\0\1\12\1\0\10\5\12\0\246\5"+
    "\232\12\146\5\157\12\21\5\304\12\274\5\57\12\321\5"+
    "\107\12\271\5\71\12\7\5\37\12\1\5\12\0\146\5"+
    "\36\12\2\5\5\0\13\5\60\12\7\0\11\5\4\12"+
    "\14\5\12\0\11\5\25\12\5\5\23\12\160\5\105\12"+
    "\13\5\1\12\56\0\20\5\4\0\15\12\100\5\2\12"+
    "\36\5\355\12\23\5\363\12\15\5\37\12\121\5\u018c\12"+
    "\4\5\153\12\5\5\15\12\3\5\11\12\7\5\12\12"+
    "\3\5\2\0\1\5\4\0\301\5\5\0\3\5\26\0"+
    "\2\5\7\0\36\5\4\0\224\5\3\0\273\5\125\12"+
    "\1\5\107\12\1\5\2\12\2\5\1\12\2\5\2\12"+
    "\2\5\4\12\1\5\14\12\1\5\1\12\1\5\7\12"+
    "\1\5\101\12\1\5\4\12\2\5\10\12\1\5\7\12"+
    "\1\5\34\12\1\5\4\12\1\5\5\12\1\5\1\12"+
    "\3\5\7\12\1\5\u0154\12\2\5\31\12\1\5\31\12"+
    "\1\5\37\12\1\5\31\12\1\5\37\12\1\5\31\12"+
    "\1\5\37\12\1\5\31\12\1\5\37\12\1\5\31\12"+
    "\1\5\10\12\2\5\151\0\4\5\62\0\10\5\1\0"+
    "\16\5\1\0\26\5\5\0\1\5\17\0\120\5\7\0"+
    "\1\5\21\0\2\5\7\0\1\5\2\0\1\5\5\0"+
    "\325\5\305\12\13\5\7\0\51\5\104\12\7\0\5\5"+
    "\12\0\246\5\4\12\1\5\33\12\1\5\2\12\1\5"+
    "\1\12\2\5\1\12\1\5\12\12\1\5\4\12\1\5"+
    "\1\12\1\5\1\12\6\5\1\12\4\5\1\12\1\5"+
    "\1\12\1\5\1\12\1\5\3\12\1\5\2\12\1\5"+
    "\1\12\2\5\1\12\1\5\1\12\1\5\1\12\1\5"+
    "\1\12\1\5\1\12\1\5\2\12\1\5\1\12\2\5"+
    "\4\12\1\5\7\12\1\5\4\12\1\5\4\12\1\5"+
    "\1\12\1\5\12\12\1\5\21\12\5\5\3\12\1\5"+
    "\5\12\1\5\21\12\104\5\327\12\51\5\65\12\13\5"+
    "\336\12\2\5\u0182\12\16\5\u0131\12\37\5\36\12\343\5"+
    "\1\0\36\5\140\0\200\5\360\0\20\5";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[28160];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\14\7\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\2\0\1\40\1\41\1\42\1\43\1\44"+
    "\11\7\1\45\10\7\1\46\1\47\1\50\1\51\1\52"+
    "\10\7\1\53\1\7\1\54\13\7\1\55\1\56\1\57"+
    "\2\7\1\60\1\61\5\7\1\62\1\7\1\63\1\7"+
    "\1\64\1\65\1\7\1\66\10\7\1\67\1\70\1\71"+
    "\1\7\1\72\1\7\1\73\1\74\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\160\0\160\0\160\0\250\0\160"+
    "\0\160\0\340\0\160\0\160\0\160\0\u0118\0\160\0\160"+
    "\0\u0150\0\u0188\0\u01c0\0\160\0\160\0\u01f8\0\u0230\0\u0268"+
    "\0\160\0\u02a0\0\u02d8\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0"+
    "\0\u0428\0\u0460\0\u0498\0\u04d0\0\u0508\0\160\0\160\0\160"+
    "\0\160\0\160\0\160\0\u0540\0\160\0\u0578\0\250\0\u05b0"+
    "\0\160\0\160\0\160\0\160\0\160\0\u05e8\0\u0620\0\u0658"+
    "\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8\0\340\0\u07e0"+
    "\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\160"+
    "\0\160\0\160\0\160\0\u05b0\0\u09a0\0\u09d8\0\u0a10\0\u0a48"+
    "\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\340\0\u0b60\0\340\0\u0b98"+
    "\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58"+
    "\0\u0d90\0\u0dc8\0\340\0\340\0\340\0\u0e00\0\u0e38\0\340"+
    "\0\340\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\340\0\u0f88"+
    "\0\340\0\u0fc0\0\340\0\340\0\u0ff8\0\340\0\u1030\0\u1068"+
    "\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180\0\u11b8\0\340\0\340"+
    "\0\340\0\u11f0\0\340\0\u1228\0\340\0\340\0\340";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\4\1\3\1\7\1\10"+
    "\1\3\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\3\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\12\1\35"+
    "\1\36\2\12\1\37\2\12\1\40\1\41\1\12\1\42"+
    "\1\43\1\44\2\12\1\45\1\12\1\46\1\3\1\47"+
    "\1\50\1\51\1\52\1\53\1\6\2\54\1\6\1\54"+
    "\1\6\3\54\1\55\50\54\1\56\6\54\76\0\1\57"+
    "\13\0\1\60\1\0\1\57\43\0\1\12\11\0\1\12"+
    "\11\0\1\12\6\0\25\12\7\0\1\12\16\0\1\61"+
    "\57\0\1\57\15\0\1\57\66\0\1\62\52\0\1\57"+
    "\13\0\1\60\1\0\1\23\73\0\1\63\67\0\1\64"+
    "\67\0\1\65\37\0\1\12\11\0\1\12\11\0\1\12"+
    "\6\0\1\12\1\66\15\12\1\67\5\12\7\0\2\12"+
    "\11\0\1\12\11\0\1\12\6\0\15\12\1\70\1\12"+
    "\1\71\5\12\7\0\2\12\11\0\1\12\11\0\1\12"+
    "\6\0\7\12\1\72\15\12\7\0\2\12\11\0\1\12"+
    "\11\0\1\12\6\0\12\12\1\73\12\12\7\0\2\12"+
    "\11\0\1\12\11\0\1\12\6\0\12\12\1\74\2\12"+
    "\1\75\4\12\1\76\2\12\7\0\2\12\11\0\1\12"+
    "\11\0\1\12\6\0\5\12\1\77\6\12\1\100\10\12"+
    "\7\0\2\12\11\0\1\12\11\0\1\12\6\0\1\101"+
    "\24\12\7\0\2\12\11\0\1\12\11\0\1\12\6\0"+
    "\22\12\1\102\2\12\7\0\2\12\11\0\1\12\11\0"+
    "\1\12\6\0\17\12\1\103\2\12\1\104\2\12\7\0"+
    "\2\12\11\0\1\12\11\0\1\12\6\0\4\12\1\105"+
    "\20\12\7\0\2\12\11\0\1\12\11\0\1\12\6\0"+
    "\21\12\1\106\3\12\7\0\2\12\11\0\1\12\11\0"+
    "\1\12\6\0\15\12\1\107\7\12\7\0\1\12\2\54"+
    "\1\0\1\54\1\0\3\54\1\0\50\54\1\0\6\54"+
    "\10\0\1\110\36\0\1\111\2\0\1\112\1\0\1\113"+
    "\21\0\1\114\15\0\1\114\43\0\1\12\11\0\1\12"+
    "\11\0\1\12\6\0\20\12\1\115\4\12\7\0\2\12"+
    "\11\0\1\12\11\0\1\12\6\0\17\12\1\116\5\12"+
    "\7\0\2\12\11\0\1\12\11\0\1\12\6\0\15\12"+
    "\1\117\7\12\7\0\2\12\11\0\1\12\11\0\1\12"+
    "\6\0\4\12\1\120\20\12\7\0\2\12\11\0\1\12"+
    "\11\0\1\12\6\0\1\121\24\12\7\0\2\12\11\0"+
    "\1\12\11\0\1\12\6\0\10\12\1\122\7\12\1\123"+
    "\4\12\7\0\2\12\11\0\1\12\11\0\1\12\6\0"+
    "\15\12\1\124\7\12\7\0\2\12\11\0\1\12\11\0"+
    "\1\12\6\0\17\12\1\125\5\12\7\0\2\12\11\0"+
    "\1\12\11\0\1\12\6\0\14\12\1\126\10\12\7\0"+
    "\2\12\11\0\1\12\11\0\1\12\6\0\21\12\1\127"+
    "\3\12\7\0\2\12\11\0\1\12\11\0\1\12\6\0"+
    "\10\12\1\130\14\12\7\0\2\12\11\0\1\12\11\0"+
    "\1\12\6\0\12\12\1\131\12\12\7\0\2\12\11\0"+
    "\1\12\11\0\1\12\6\0\10\12\1\132\14\12\7\0"+
    "\2\12\11\0\1\12\11\0\1\12\6\0\1\12\1\133"+
    "\23\12\7\0\2\12\11\0\1\12\11\0\1\12\6\0"+
    "\21\12\1\134\3\12\7\0\2\12\11\0\1\12\11\0"+
    "\1\12\6\0\17\12\1\135\5\12\7\0\2\12\11\0"+
    "\1\12\11\0\1\12\6\0\10\12\1\136\14\12\7\0"+
    "\2\12\11\0\1\12\11\0\1\12\6\0\21\12\1\137"+
    "\3\12\7\0\2\12\11\0\1\12\11\0\1\12\6\0"+
    "\1\140\24\12\7\0\2\12\11\0\1\12\11\0\1\12"+
    "\6\0\12\12\1\141\12\12\7\0\2\12\11\0\1\12"+
    "\11\0\1\12\6\0\1\142\24\12\7\0\2\12\11\0"+
    "\1\12\11\0\1\12\6\0\17\12\1\143\5\12\7\0"+
    "\2\12\11\0\1\12\11\0\1\12\6\0\5\12\1\144"+
    "\17\12\7\0\2\12\11\0\1\12\11\0\1\12\6\0"+
    "\4\12\1\145\20\12\7\0\2\12\11\0\1\12\11\0"+
    "\1\12\6\0\1\146\24\12\7\0\2\12\11\0\1\12"+
    "\11\0\1\12\6\0\2\12\1\147\22\12\7\0\2\12"+
    "\11\0\1\12\11\0\1\12\6\0\14\12\1\150\10\12"+
    "\7\0\2\12\11\0\1\12\11\0\1\12\6\0\12\12"+
    "\1\151\12\12\7\0\2\12\11\0\1\12\11\0\1\12"+
    "\6\0\14\12\1\152\6\12\1\153\1\12\7\0\2\12"+
    "\11\0\1\12\11\0\1\12\6\0\12\12\1\154\12\12"+
    "\7\0\2\12\11\0\1\12\11\0\1\12\6\0\22\12"+
    "\1\155\2\12\7\0\2\12\11\0\1\12\11\0\1\12"+
    "\6\0\10\12\1\156\14\12\7\0\2\12\11\0\1\12"+
    "\11\0\1\12\6\0\3\12\1\157\21\12\7\0\2\12"+
    "\11\0\1\12\11\0\1\12\6\0\17\12\1\160\5\12"+
    "\7\0\2\12\11\0\1\12\11\0\1\12\6\0\24\12"+
    "\1\161\7\0\2\12\11\0\1\12\11\0\1\12\6\0"+
    "\4\12\1\162\20\12\7\0\2\12\11\0\1\12\11\0"+
    "\1\12\6\0\11\12\1\163\13\12\7\0\2\12\11\0"+
    "\1\12\11\0\1\12\6\0\21\12\1\164\3\12\7\0"+
    "\2\12\11\0\1\12\11\0\1\12\6\0\21\12\1\165"+
    "\3\12\7\0\2\12\11\0\1\12\11\0\1\12\6\0"+
    "\21\12\1\166\3\12\7\0\2\12\11\0\1\12\11\0"+
    "\1\12\6\0\1\167\24\12\7\0\2\12\11\0\1\12"+
    "\11\0\1\12\6\0\10\12\1\170\14\12\7\0\2\12"+
    "\11\0\1\12\11\0\1\12\6\0\17\12\1\171\5\12"+
    "\7\0\2\12\11\0\1\12\11\0\1\12\6\0\14\12"+
    "\1\172\10\12\7\0\2\12\11\0\1\12\11\0\1\12"+
    "\6\0\1\173\24\12\7\0\2\12\11\0\1\12\11\0"+
    "\1\12\6\0\1\174\24\12\7\0\2\12\11\0\1\12"+
    "\11\0\1\12\6\0\10\12\1\175\14\12\7\0\2\12"+
    "\11\0\1\12\11\0\1\12\6\0\21\12\1\176\3\12"+
    "\7\0\2\12\11\0\1\12\11\0\1\12\6\0\2\12"+
    "\1\177\22\12\7\0\2\12\11\0\1\12\11\0\1\12"+
    "\6\0\14\12\1\200\10\12\7\0\2\12\11\0\1\12"+
    "\11\0\1\12\6\0\6\12\1\201\16\12\7\0\2\12"+
    "\11\0\1\12\11\0\1\12\6\0\2\12\1\202\22\12"+
    "\7\0\2\12\11\0\1\12\11\0\1\12\6\0\14\12"+
    "\1\203\10\12\7\0\2\12\11\0\1\12\11\0\1\12"+
    "\6\0\15\12\1\204\7\12\7\0\2\12\11\0\1\12"+
    "\11\0\1\12\6\0\4\12\1\205\20\12\7\0\2\12"+
    "\11\0\1\12\11\0\1\12\6\0\21\12\1\206\3\12"+
    "\7\0\2\12\11\0\1\12\11\0\1\12\6\0\14\12"+
    "\1\207\10\12\7\0\1\12";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4704];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\4\11\1\1\2\11\1\1\3\11\1\1\2\11"+
    "\3\1\2\11\3\1\1\11\14\1\6\11\1\1\1\11"+
    "\1\1\2\0\5\11\22\1\4\11\74\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    //Código de usuario
    String cadena= "";
	StringBuffer string = new StringBuffer();

	private Symbol symbol(int type) {
		return new Symbol(type);
	}
	
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { String errLex = "Error léxico : '"+yytext()+"' en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1);
        Util.WriteToken(errLex);
            }
            // fall through
          case 62: break;
          case 2:
            { /*Espacios en blanco, ignorados*/
            }
            // fall through
          case 63: break;
          case 3:
            { /*Saltos de linea, ignorados*/
            }
            // fall through
          case 64: break;
          case 4:
            { System.out.print(yytext());
            }
            // fall through
          case 65: break;
          case 5:
            { Util.WriteToken("Encontre negacion Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.NEGACION, yyline, yycolumn,"negacion");
            }
            // fall through
          case 66: break;
          case 6:
            { Util.WriteToken("Encontre un NUMERAL Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.NUMERAL, yyline, yycolumn,"numeral");
            }
            // fall through
          case 67: break;
          case 7:
            { Util.WriteToken("Encontre un IDENTIFICADOR " + yytext()); return new Symbol(sym.IDENTIFICADOR, yyline, yycolumn,"identificador");
            }
            // fall through
          case 68: break;
          case 8:
            { Util.WriteToken("Encontre conjuncion Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.CONJUNCION, yyline, yycolumn,"conjuncion");
            }
            // fall through
          case 69: break;
          case 9:
            { Util.WriteToken("Encontre un PARENIZQ Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.PARENIZQ, yyline, yycolumn,"parenizq");
            }
            // fall through
          case 70: break;
          case 10:
            { Util.WriteToken("Encontre un PARENDER Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.PARENDER, yyline, yycolumn,"parender");
            }
            // fall through
          case 71: break;
          case 11:
            { Util.WriteToken("Encontre un MULTIPLICACION Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.MULTIPLICACION, yyline, yycolumn,"multiplicacion");
            }
            // fall through
          case 72: break;
          case 12:
            { Util.WriteToken("Encontre un SUMA Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.SUMA, yyline, yycolumn,"suma");
            }
            // fall through
          case 73: break;
          case 13:
            { Util.WriteToken("Encontre coma Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.COMA, yyline, yycolumn,"coma");
            }
            // fall through
          case 74: break;
          case 14:
            { Util.WriteToken("Encontre un RESTA Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.RESTA, yyline, yycolumn,"resta");
            }
            // fall through
          case 75: break;
          case 15:
            { Util.WriteToken("Encontre un DIVMODULAR Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.DIVMODULAR, yyline, yycolumn,"divmodular");
            }
            // fall through
          case 76: break;
          case 16:
            { Util.WriteToken("Encontre un ENTERO  Linea: " + yyline + " columna " + yycolumn); return new Symbol(sym.ENTERO, yyline, yycolumn,"entero");
            }
            // fall through
          case 77: break;
          case 17:
            { Util.WriteToken("Encontre un CONDTERNARIA Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.CONDTERNARIA, yyline, yycolumn,"condternaria");
            }
            // fall through
          case 78: break;
          case 18:
            { Util.WriteToken("Encontre puntoycoma Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.PUNTOYCOMA, yyline, yycolumn,"puntoycoma");
            }
            // fall through
          case 79: break;
          case 19:
            { Util.WriteToken("Encontre un MENOR Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.MENOR, yyline, yycolumn,"menor");
            }
            // fall through
          case 80: break;
          case 20:
            { Util.WriteToken("Encontre un ASIGNA Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.ASIGNA, yyline, yycolumn,"asigna");
            }
            // fall through
          case 81: break;
          case 21:
            { Util.WriteToken("Encontre un MAYOR Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.MAYOR, yyline, yycolumn,"mayor");
            }
            // fall through
          case 82: break;
          case 22:
            { Util.WriteToken("Encontre un VALIDTERNARIO Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.VALIDTERNARIO, yyline, yycolumn,"validternario");
            }
            // fall through
          case 83: break;
          case 23:
            { Util.WriteToken("Encontre un ABRECORCHETE Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.ABRECORCHETE, yyline, yycolumn,"abrecorchete");
            }
            // fall through
          case 84: break;
          case 24:
            { Util.WriteToken("Encontre un CIERRACORCHETE Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.CIERRACORCHETE, yyline, yycolumn,"cierracorchete");
            }
            // fall through
          case 85: break;
          case 25:
            { Util.WriteToken("Encontre un LLAVEIZQ Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.LLAVEIZQ, yyline, yycolumn,"llaveizq");
            }
            // fall through
          case 86: break;
          case 26:
            { Util.WriteToken("Encontre disyuncion Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.DISYUNCION, yyline, yycolumn,"diyuncion");
            }
            // fall through
          case 87: break;
          case 27:
            { Util.WriteToken("Encontre un LLAVEDER Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.LLAVEDER, yyline, yycolumn,"llaveder");
            }
            // fall through
          case 88: break;
          case 28:
            { Util.WriteToken("Encontre un MODULO Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.MODULO, yyline, yycolumn,"modulo");
            }
            // fall through
          case 89: break;
          case 29:
            { cadena += yytext();
            }
            // fall through
          case 90: break;
          case 30:
            { yybegin(YYINITIAL); 
                                       return symbol(sym.CADENA, 
                                       cadena.toString());
            }
            // fall through
          case 91: break;
          case 31:
            { cadena += '\\';
            }
            // fall through
          case 92: break;
          case 32:
            { Util.WriteToken("Encontre un POTENCIA Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.POTENCIA, yyline, yycolumn,"potencia");
            }
            // fall through
          case 93: break;
          case 33:
            { Util.WriteToken("Encontre un DIVISION Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.DIVISION, yyline, yycolumn,"division");
            }
            // fall through
          case 94: break;
          case 34:
            { Util.WriteToken("Encontre un MENOROIGUAL Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.MENOROIGUAL, yyline, yycolumn,"menoroigual");
            }
            // fall through
          case 95: break;
          case 35:
            { Util.WriteToken("Encontre un IGUAL Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.IGUAL, yyline, yycolumn,"igual");
            }
            // fall through
          case 96: break;
          case 36:
            { Util.WriteToken("Encontre un MAYOROIGUAL Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.MAYOROIGUAL, yyline, yycolumn,"mayoroigual");
            }
            // fall through
          case 97: break;
          case 37:
            { Util.WriteToken("Encontre un if Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.IF, yyline, yycolumn,"if");
            }
            // fall through
          case 98: break;
          case 38:
            { cadena += '\"';
            }
            // fall through
          case 99: break;
          case 39:
            { cadena += '\n';
            }
            // fall through
          case 100: break;
          case 40:
            { cadena += '\r';
            }
            // fall through
          case 101: break;
          case 41:
            { cadena += '\t';
            }
            // fall through
          case 102: break;
          case 42:
            { Util.WriteToken("Encontre un FLOAT  Linea: " + yyline + " columna " + yycolumn); return new Symbol(sym.FLOAT, yyline, yycolumn,"float");
            }
            // fall through
          case 103: break;
          case 43:
            { Util.WriteToken("Encontre un for Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.FOR, yyline, yycolumn,"for");
            }
            // fall through
          case 104: break;
          case 44:
            { Util.WriteToken("Encontre un tipo ENTERO Linea: " + yyline + " columna " + yycolumn); return new Symbol(sym.INT1, yyline, yycolumn,"entero");
            }
            // fall through
          case 105: break;
          case 45:
            { Util.WriteToken("Encontre un tipo CHAR1 Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.CHAR1, yyline, yycolumn,"char");
            }
            // fall through
          case 106: break;
          case 46:
            { Util.WriteToken("Encontre un elif Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.ELIF, yyline, yycolumn,"elif");
            }
            // fall through
          case 107: break;
          case 47:
            { Util.WriteToken("Encontre un else Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.ELSE, yyline, yycolumn,"else");
            }
            // fall through
          case 108: break;
          case 48:
            { Util.WriteToken("Encontre un Kmain Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.KEYWORDMAIN, yyline, yycolumn,"main");
            }
            // fall through
          case 109: break;
          case 49:
            { Util.WriteToken("Encontre un KNULL Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.KEYWORDNULL, yyline, yycolumn,"null");
            }
            // fall through
          case 110: break;
          case 50:
            { Util.WriteToken("Encontre un void Linea: " + yyline + " columna " + yycolumn +" Token ID: " + sym.VOI); return new Symbol(sym.VOI, yyline, yycolumn,"void");
            }
            // fall through
          case 111: break;
          case 51:
            { Util.WriteToken("Encontre un Karray Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.KEYWORDARRAY, yyline, yycolumn,"array");
            }
            // fall through
          case 112: break;
          case 52:
            { Util.WriteToken("Encontre un break Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.BREAK, yyline, yycolumn,"break");
            }
            // fall through
          case 113: break;
          case 53:
            { Util.WriteToken("Encontre un KFLOAT Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.KEYWORDFLOAT, yyline, yycolumn,"float");
            }
            // fall through
          case 114: break;
          case 54:
            { Util.WriteToken("Encontre un print Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.PRINT, yyline, yycolumn,"print");
            }
            // fall through
          case 115: break;
          case 55:
            { Util.WriteToken("Encontre un public Linea: " + yyline + " columna " + yycolumn); return new Symbol(sym.PUB, yyline, yycolumn,"public");
            }
            // fall through
          case 116: break;
          case 56:
            { Util.WriteToken("Encontre un return Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.RETURN, yyline, yycolumn,"return");
            }
            // fall through
          case 117: break;
          case 57:
            { Util.WriteToken("Encontre un KSTRING Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.KEYWORDSTRING, yyline, yycolumn,"string");
            }
            // fall through
          case 118: break;
          case 58:
            { return symbol(sym.BOOLEAN);
            }
            // fall through
          case 119: break;
          case 59:
            { Util.WriteToken("Encontre un private Linea: " + yyline + " columna " + yycolumn); return new Symbol(sym.PRI, yyline, yycolumn,"private");
            }
            // fall through
          case 120: break;
          case 60:
            { return symbol(sym.ABSTRACT);
            }
            // fall through
          case 121: break;
          case 61:
            { Util.WriteToken("Encontre un KFUNTION Linea: " + yyline + " columna " + yycolumn);return new Symbol(sym.KEYWORDFUNCTION, yyline, yycolumn,"function");
            }
            // fall through
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
