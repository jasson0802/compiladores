
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\002\003\000\002\004" +
    "\007\000\002\004\010\000\002\006\005\000\002\006\003" +
    "\000\002\030\004\000\002\027\005\000\002\027\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\043\003\000\002\043\004\000\002\043\003\000" +
    "\002\043\004\000\002\007\004\000\002\053\003\000\002" +
    "\053\003\000\002\031\004\000\002\031\003\000\002\032" +
    "\004\000\002\032\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\011\005\000\002\011\004\000\002\010\006\000\002\013" +
    "\005\000\002\037\005\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\023\003\000\002\023\003\000\002" +
    "\047\005\000\002\060\005\000\002\060\005\000\002\025" +
    "\005\000\002\025\004\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\005\005\000\002\005\004\000\002\026\004" +
    "\000\002\026\003\000\002\054\006\000\002\041\004\000" +
    "\002\040\005\000\002\040\004\000\002\056\004\000\002" +
    "\045\012\000\002\042\004\000\002\044\004\000\002\057" +
    "\007\000\002\035\010\000\002\035\011\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\016\005\000\002\016\005\000\002\014\005" +
    "\000\002\014\003\000\002\017\005\000\002\017\005\000" +
    "\002\015\005\000\002\015\003\000\002\015\003\000\002" +
    "\036\005\000\002\036\003\000\002\015\005\000\002\015" +
    "\004\000\002\051\007\000\002\052\006\000\002\052\005" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\012\005\000\002\012\003\000\002\021\006\000\002" +
    "\021\006\000\002\021\005\000\002\021\003\000\002\021" +
    "\005\000\002\050\005\000\002\050\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\004\007\005\001\002\000\004\002\000\001" +
    "\002\000\004\071\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\026\011\001\002\000" +
    "\020\007\012\027\022\064\016\065\023\073\014\074\017" +
    "\075\013\001\002\000\004\004\ufff4\001\002\000\004\004" +
    "\ufff3\001\002\000\004\004\ufff7\001\002\000\006\017\ufffc" +
    "\027\ufffc\001\002\000\004\004\ufff6\001\002\000\004\004" +
    "\ufff8\001\002\000\004\004\316\001\002\000\006\017\071" +
    "\027\314\001\002\000\004\024\025\001\002\000\004\004" +
    "\ufff5\001\002\000\004\002\uffff\001\002\000\052\004\040" +
    "\007\012\014\062\020\051\025\032\030\041\031\030\053" +
    "\043\054\034\055\061\056\057\057\052\060\046\064\016" +
    "\065\023\066\054\070\063\073\014\074\017\075\013\001" +
    "\002\000\052\004\uffc2\007\uffc2\014\uffc2\020\uffc2\025\uffc2" +
    "\030\uffc2\031\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057" +
    "\uffc2\060\uffc2\064\uffc2\065\uffc2\066\uffc2\070\uffc2\073\uffc2" +
    "\074\uffc2\075\uffc2\001\002\000\052\004\040\007\012\014" +
    "\062\020\051\025\313\030\041\031\030\053\043\054\034" +
    "\055\061\056\057\057\052\060\046\064\016\065\023\066" +
    "\054\070\063\073\014\074\017\075\013\001\002\000\004" +
    "\031\307\001\002\000\052\004\uffbf\007\uffbf\014\uffbf\020" +
    "\uffbf\025\uffbf\030\uffbf\031\uffbf\053\uffbf\054\uffbf\055\uffbf" +
    "\056\uffbf\057\uffbf\060\uffbf\064\uffbf\065\uffbf\066\uffbf\070" +
    "\uffbf\073\uffbf\074\uffbf\075\uffbf\001\002\000\054\002\uffbc" +
    "\004\uffbc\007\uffbc\014\uffbc\020\uffbc\025\uffbc\030\uffbc\031" +
    "\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc" +
    "\064\uffbc\065\uffbc\066\uffbc\070\uffbc\073\uffbc\074\uffbc\075" +
    "\uffbc\001\002\000\052\004\uffc4\007\uffc4\014\uffc4\020\uffc4" +
    "\025\uffc4\030\uffc4\031\uffc4\053\uffc4\054\uffc4\055\uffc4\056" +
    "\uffc4\057\uffc4\060\uffc4\064\uffc4\065\uffc4\066\uffc4\070\uffc4" +
    "\073\uffc4\074\uffc4\075\uffc4\001\002\000\004\026\267\001" +
    "\002\000\052\004\uffc8\007\uffc8\014\uffc8\020\uffc8\025\uffc8" +
    "\030\uffc8\031\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057" +
    "\uffc8\060\uffc8\064\uffc8\065\uffc8\066\uffc8\070\uffc8\073\uffc8" +
    "\074\uffc8\075\uffc8\001\002\000\052\004\uffc6\007\uffc6\014" +
    "\uffc6\020\uffc6\025\uffc6\030\uffc6\031\uffc6\053\uffc6\054\uffc6" +
    "\055\uffc6\056\uffc6\057\uffc6\060\uffc6\064\uffc6\065\uffc6\066" +
    "\uffc6\070\uffc6\073\uffc6\074\uffc6\075\uffc6\001\002\000\052" +
    "\004\uffc5\007\uffc5\014\uffc5\020\uffc5\025\uffc5\030\uffc5\031" +
    "\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5" +
    "\064\uffc5\065\uffc5\066\uffc5\070\uffc5\073\uffc5\074\uffc5\075" +
    "\uffc5\001\002\000\004\041\262\001\002\000\004\030\257" +
    "\001\002\000\052\004\uffc7\007\uffc7\014\uffc7\020\uffc7\025" +
    "\uffc7\030\uffc7\031\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7" +
    "\057\uffc7\060\uffc7\064\uffc7\065\uffc7\066\uffc7\070\uffc7\073" +
    "\uffc7\074\uffc7\075\uffc7\001\002\000\004\026\133\001\002" +
    "\000\052\004\uffba\007\uffba\014\uffba\020\uffba\025\uffba\030" +
    "\uffba\031\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba" +
    "\060\uffba\064\uffba\065\uffba\066\uffba\070\uffba\073\uffba\074" +
    "\uffba\075\uffba\001\002\000\052\004\uffc3\007\uffc3\014\uffc3" +
    "\020\uffc3\025\uffc3\030\uffc3\031\uffc3\053\uffc3\054\uffc3\055" +
    "\uffc3\056\uffc3\057\uffc3\060\uffc3\064\uffc3\065\uffc3\066\uffc3" +
    "\070\uffc3\073\uffc3\074\uffc3\075\uffc3\001\002\000\024\004" +
    "\110\005\100\021\254\031\106\050\113\062\112\072\076" +
    "\076\077\077\104\001\002\000\052\004\uffc0\007\uffc0\014" +
    "\uffc0\020\uffc0\025\uffc0\030\uffc0\031\uffc0\053\uffc0\054\uffc0" +
    "\055\uffc0\056\uffc0\057\uffc0\060\uffc0\064\uffc0\065\uffc0\066" +
    "\uffc0\070\uffc0\073\uffc0\074\uffc0\075\uffc0\001\002\000\004" +
    "\021\252\001\002\000\056\004\uff8b\007\uff8b\014\uff8b\020" +
    "\uff8b\025\uff8b\030\uff8b\031\uff8b\053\uff8b\054\uff8b\055\uff8b" +
    "\056\uff8b\057\uff8b\060\uff8b\064\uff8b\065\uff8b\066\uff8b\070" +
    "\uff8b\073\uff8b\074\uff8b\075\uff8b\076\077\077\104\001\002" +
    "\000\004\021\247\001\002\000\052\004\uffc1\007\uffc1\014" +
    "\uffc1\020\uffc1\025\uffc1\030\uffc1\031\uffc1\053\uffc1\054\uffc1" +
    "\055\uffc1\056\uffc1\057\uffc1\060\uffc1\064\uffc1\065\uffc1\066" +
    "\uffc1\070\uffc1\073\uffc1\074\uffc1\075\uffc1\001\002\000\004" +
    "\004\245\001\002\000\052\004\uffc9\007\uffc9\014\uffc9\020" +
    "\uffc9\025\uffc9\030\uffc9\031\uffc9\053\uffc9\054\uffc9\055\uffc9" +
    "\056\uffc9\057\uffc9\060\uffc9\064\uffc9\065\uffc9\066\uffc9\070" +
    "\uffc9\073\uffc9\074\uffc9\075\uffc9\001\002\000\052\004\uffbe" +
    "\007\uffbe\014\uffbe\020\uffbe\025\uffbe\030\uffbe\031\uffbe\053" +
    "\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\064\uffbe" +
    "\065\uffbe\066\uffbe\070\uffbe\073\uffbe\074\uffbe\075\uffbe\001" +
    "\002\000\004\024\025\001\002\000\004\004\223\001\002" +
    "\000\004\026\133\001\002\000\004\026\075\001\002\000" +
    "\004\004\064\001\002\000\004\026\066\001\002\000\004" +
    "\024\025\001\002\000\020\007\012\027\070\064\016\065" +
    "\023\073\014\074\017\075\013\001\002\000\006\017\071" +
    "\027\072\001\002\000\004\024\uffda\001\002\000\016\007" +
    "\012\064\016\065\023\073\014\074\017\075\013\001\002" +
    "\000\004\024\uffdb\001\002\000\006\017\ufffd\027\ufffd\001" +
    "\002\000\052\004\uffd9\007\uffd9\014\uffd9\020\uffd9\025\uffd9" +
    "\030\uffd9\031\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057" +
    "\uffd9\060\uffd9\064\uffd9\065\uffd9\066\uffd9\070\uffd9\073\uffd9" +
    "\074\uffd9\075\uffd9\001\002\000\022\004\110\005\100\031" +
    "\106\050\113\062\112\072\076\076\077\077\104\001\002" +
    "\000\052\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\023" +
    "\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\035\uffef" +
    "\036\uffef\037\uffef\040\uffef\042\uffef\043\uffef\044\uffef\045" +
    "\uffef\046\uffef\001\002\000\052\015\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\021\uffe9\023\uffe9\027\uffe9\030\uffe9\031\uffe9\032" +
    "\uffe9\033\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\042\uffe9" +
    "\043\uffe9\044\uffe9\045\uffe9\046\uffe9\001\002\000\052\015" +
    "\uffee\016\uffee\017\uffee\020\uffee\021\uffee\023\uffee\027\uffee" +
    "\030\uffee\031\uffee\032\uffee\033\uffee\035\uffee\036\uffee\037" +
    "\uffee\040\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee" +
    "\001\002\000\004\027\131\001\002\000\052\015\ufff1\016" +
    "\ufff1\017\ufff1\020\ufff1\021\ufff1\023\ufff1\027\ufff1\030\ufff1" +
    "\031\ufff1\032\ufff1\033\ufff1\035\ufff1\036\ufff1\037\ufff1\040" +
    "\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\001\002" +
    "\000\052\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\023" +
    "\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\035\ufff2" +
    "\036\ufff2\037\ufff2\040\ufff2\042\ufff2\043\ufff2\044\ufff2\045" +
    "\ufff2\046\ufff2\001\002\000\052\015\uffe8\016\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\023\uffe8\027\uffe8\030\uffe8\031\uffe8\032" +
    "\uffe8\033\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\042\uffe8" +
    "\043\uffe8\044\uffe8\045\uffe8\046\uffe8\001\002\000\036\015" +
    "\uff92\016\uff92\017\uff92\021\uff92\023\uff92\027\uff92\030\uff92" +
    "\031\uff92\032\uff92\033\uff92\035\uff92\044\uff92\045\uff92\046" +
    "\uff92\001\002\000\006\005\130\050\127\001\002\000\052" +
    "\015\uff91\016\uff91\017\uff91\020\uff91\021\uff91\023\uff91\027" +
    "\uff91\030\uff91\031\uff91\032\uff91\033\uff91\035\uff91\036\uff91" +
    "\037\uff91\040\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046" +
    "\uff91\001\002\000\040\015\uff93\016\uff93\017\uff93\021\uff93" +
    "\023\uff93\026\120\027\uff93\030\uff93\031\uff93\032\uff93\033" +
    "\uff93\035\uff93\044\uff93\045\uff93\046\uff93\001\002\000\052" +
    "\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\023\ufff0\027" +
    "\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\035\ufff0\036\ufff0" +
    "\037\ufff0\040\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046" +
    "\ufff0\001\002\000\004\051\115\001\002\000\052\015\uffec" +
    "\016\uffec\017\uffec\020\uffec\021\uffec\023\uffec\027\uffec\030" +
    "\uffec\031\uffec\032\uffec\033\uffec\035\uffec\036\uffec\037\uffec" +
    "\040\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\001" +
    "\002\000\006\051\117\062\116\001\002\000\006\051\uffe4" +
    "\062\uffe4\001\002\000\052\015\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\023\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\042\uffd8\043" +
    "\uffd8\044\uffd8\045\uffd8\046\uffd8\001\002\000\006\051\uffe5" +
    "\062\uffe5\001\002\000\024\004\110\005\100\027\123\031" +
    "\106\050\113\062\112\072\076\076\077\077\104\001\002" +
    "\000\006\017\uff8f\027\uff8f\001\002\000\006\017\124\027" +
    "\125\001\002\000\052\015\uff94\016\uff94\017\uff94\020\uff94" +
    "\021\uff94\023\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033" +
    "\uff94\035\uff94\036\uff94\037\uff94\040\uff94\042\uff94\043\uff94" +
    "\044\uff94\045\uff94\046\uff94\001\002\000\004\004\126\001" +
    "\002\000\052\015\uff95\016\uff95\017\uff95\020\uff95\021\uff95" +
    "\023\uff95\027\uff95\030\uff95\031\uff95\032\uff95\033\uff95\035" +
    "\uff95\036\uff95\037\uff95\040\uff95\042\uff95\043\uff95\044\uff95" +
    "\045\uff95\046\uff95\001\002\000\006\017\uff90\027\uff90\001" +
    "\002\000\052\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb" +
    "\023\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\035" +
    "\uffeb\036\uffeb\037\uffeb\040\uffeb\042\uffeb\043\uffeb\044\uffeb" +
    "\045\uffeb\046\uffeb\001\002\000\052\015\uffed\016\uffed\017" +
    "\uffed\020\uffed\021\uffed\023\uffed\027\uffed\030\uffed\031\uffed" +
    "\032\uffed\033\uffed\035\uffed\036\uffed\037\uffed\040\uffed\042" +
    "\uffed\043\uffed\044\uffed\045\uffed\046\uffed\001\002\000\004" +
    "\021\132\001\002\000\052\004\uffb1\007\uffb1\014\uffb1\020" +
    "\uffb1\025\uffb1\030\uffb1\031\uffb1\053\uffb1\054\uffb1\055\uffb1" +
    "\056\uffb1\057\uffb1\060\uffb1\064\uffb1\065\uffb1\066\uffb1\070" +
    "\uffb1\073\uffb1\074\uffb1\075\uffb1\001\002\000\026\004\147" +
    "\005\100\020\137\026\145\031\106\050\113\062\112\072" +
    "\076\076\077\077\104\001\002\000\052\004\uffb2\007\uffb2" +
    "\014\uffb2\020\uffb2\025\uffb2\030\uffb2\031\uffb2\053\uffb2\054" +
    "\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\064\uffb2\065\uffb2" +
    "\066\uffb2\070\uffb2\073\uffb2\074\uffb2\075\uffb2\001\002\000" +
    "\010\021\uffad\027\uffad\046\uffad\001\002\000\006\027\216" +
    "\046\215\001\002\000\026\004\147\005\100\020\137\026" +
    "\213\031\106\050\113\062\112\072\076\076\077\077\104" +
    "\001\002\000\036\015\171\016\170\020\164\030\163\031" +
    "\177\032\156\033\162\035\165\036\166\037\157\040\160" +
    "\042\172\043\161\044\175\001\002\000\010\021\uffaa\027" +
    "\uffaa\046\uffaa\001\002\000\010\021\uffae\027\uffae\046\uffae" +
    "\001\002\000\010\021\uffac\027\uffac\046\uffac\001\002\000" +
    "\044\015\uff91\016\uff91\020\uff91\021\uffab\027\uffab\030\uff91" +
    "\031\uff91\032\uff91\033\uff91\035\uff91\036\uff91\037\uff91\040" +
    "\uff91\042\uff91\043\uff91\044\uff91\046\uffab\001\002\000\026" +
    "\004\147\005\100\020\137\026\145\031\106\050\113\062" +
    "\112\072\076\076\077\077\104\001\002\000\044\015\uff92" +
    "\016\uff92\020\uff92\021\uff9c\027\uff9c\030\uff92\031\uff92\032" +
    "\uff92\033\uff92\035\uff92\036\uff92\037\uff92\040\uff92\042\uff92" +
    "\043\uff92\044\uff92\046\uff9c\001\002\000\046\015\uff93\016" +
    "\uff93\020\uff93\021\uff9b\026\120\027\uff9b\030\uff93\031\uff93" +
    "\032\uff93\033\uff93\035\uff93\036\uff93\037\uff93\040\uff93\042" +
    "\uff93\043\uff93\044\uff93\046\uff9b\001\002\000\004\027\155" +
    "\001\002\000\004\027\154\001\002\000\004\027\153\001" +
    "\002\000\010\021\uff98\027\uff98\046\uff98\001\002\000\010" +
    "\021\uffa2\027\uffa2\046\uffa2\001\002\000\010\021\uff9e\027" +
    "\uff9e\046\uff9e\001\002\000\022\004\uffa7\005\uffa7\031\uffa7" +
    "\050\uffa7\062\uffa7\072\uffa7\076\uffa7\077\uffa7\001\002\000" +
    "\022\004\uffd5\005\uffd5\031\uffd5\050\uffd5\062\uffd5\072\uffd5" +
    "\076\uffd5\077\uffd5\001\002\000\022\004\uffd4\005\uffd4\031" +
    "\uffd4\050\uffd4\062\uffd4\072\uffd4\076\uffd4\077\uffd4\001\002" +
    "\000\022\004\uffd2\005\uffd2\031\uffd2\050\uffd2\062\uffd2\072" +
    "\uffd2\076\uffd2\077\uffd2\001\002\000\022\004\uffa4\005\uffa4" +
    "\031\uffa4\050\uffa4\062\uffa4\072\uffa4\076\uffa4\077\uffa4\001" +
    "\002\000\022\004\uffa9\005\uffa9\031\uffa9\050\uffa9\062\uffa9" +
    "\072\uffa9\076\uffa9\077\uffa9\001\002\000\004\041\211\001" +
    "\002\000\022\004\uffa5\005\uffa5\031\uffa5\050\uffa5\062\uffa5" +
    "\072\uffa5\076\uffa5\077\uffa5\001\002\000\022\004\uffd6\005" +
    "\uffd6\031\uffd6\050\uffd6\062\uffd6\072\uffd6\076\uffd6\077\uffd6" +
    "\001\002\000\022\004\110\005\100\031\106\050\113\062" +
    "\112\072\076\076\077\077\104\001\002\000\022\004\uffcf" +
    "\005\uffcf\031\uffcf\050\uffcf\062\uffcf\072\uffcf\076\uffcf\077" +
    "\uffcf\001\002\000\022\004\uffd0\005\uffd0\031\uffd0\050\uffd0" +
    "\062\uffd0\072\uffd0\076\uffd0\077\uffd0\001\002\000\022\004" +
    "\uffd3\005\uffd3\031\uffd3\050\uffd3\062\uffd3\072\uffd3\076\uffd3" +
    "\077\uffd3\001\002\000\022\004\uffd1\005\uffd1\031\uffd1\050" +
    "\uffd1\062\uffd1\072\uffd1\076\uffd1\077\uffd1\001\002\000\022" +
    "\004\110\005\100\031\106\050\113\062\112\072\076\076" +
    "\077\077\104\001\002\000\022\004\uffa6\005\uffa6\031\uffa6" +
    "\050\uffa6\062\uffa6\072\uffa6\076\uffa6\077\uffa6\001\002\000" +
    "\022\004\110\005\100\031\106\050\113\062\112\072\076" +
    "\076\077\077\104\001\002\000\022\004\uffa8\005\uffa8\031" +
    "\uffa8\050\uffa8\062\uffa8\072\uffa8\076\uffa8\077\uffa8\001\002" +
    "\000\010\021\uff9f\027\uff9f\046\uff9f\001\002\000\024\021" +
    "\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\035\uffa0" +
    "\044\uffa0\046\uffa0\001\002\000\024\021\uffa3\027\uffa3\030" +
    "\163\031\177\032\156\033\162\035\165\044\175\046\uffa3" +
    "\001\002\000\022\004\110\005\100\031\106\050\113\062" +
    "\112\072\076\076\077\077\104\001\002\000\024\021\uffa1" +
    "\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\035\uffa1\044" +
    "\uffa1\046\uffa1\001\002\000\014\015\uff99\016\uff99\021\uff99" +
    "\027\uff99\046\uff99\001\002\000\014\015\171\016\170\021" +
    "\uff9d\027\uff9d\046\uff9d\001\002\000\022\004\110\005\100" +
    "\031\106\050\113\062\112\072\076\076\077\077\104\001" +
    "\002\000\014\015\uff9a\016\uff9a\021\uff9a\027\uff9a\046\uff9a" +
    "\001\002\000\022\004\uffea\005\uffea\031\uffea\050\uffea\062" +
    "\uffea\072\uffea\076\uffea\077\uffea\001\002\000\006\015\171" +
    "\016\170\001\002\000\026\004\147\005\100\020\137\026" +
    "\213\031\106\050\113\062\112\072\076\076\077\077\104" +
    "\001\002\000\010\021\uff97\027\uff97\046\uff97\001\002\000" +
    "\022\004\110\005\100\031\106\050\113\062\112\072\076" +
    "\076\077\077\104\001\002\000\004\024\025\001\002\000" +
    "\052\004\uffb9\007\uffb9\014\uffb9\020\uffb9\025\uffb9\030\uffb9" +
    "\031\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060" +
    "\uffb9\064\uffb9\065\uffb9\066\uffb9\070\uffb9\073\uffb9\074\uffb9" +
    "\075\uffb9\001\002\000\004\045\221\001\002\000\022\004" +
    "\110\005\100\031\106\050\113\062\112\072\076\076\077" +
    "\077\104\001\002\000\010\021\uff96\027\uff96\046\uff96\001" +
    "\002\000\006\021\226\041\227\001\002\000\004\021\225" +
    "\001\002\000\070\004\uffcb\005\uffcb\007\uffcb\014\uffcb\020" +
    "\uffcb\025\uffcb\026\uffcb\030\uffcb\031\uffcb\050\uffcb\053\uffcb" +
    "\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\062\uffcb\064" +
    "\uffcb\065\uffcb\066\uffcb\070\uffcb\072\uffcb\073\uffcb\074\uffcb" +
    "\075\uffcb\076\uffcb\077\uffcb\001\002\000\052\004\uffce\007" +
    "\uffce\014\uffce\020\uffce\025\uffce\030\uffce\031\uffce\053\uffce" +
    "\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce\064\uffce\065" +
    "\uffce\066\uffce\070\uffce\073\uffce\074\uffce\075\uffce\001\002" +
    "\000\032\004\147\005\100\020\137\022\233\026\145\031" +
    "\106\050\113\052\230\062\112\072\076\076\077\077\104" +
    "\001\002\000\004\026\241\001\002\000\004\021\uffcc\001" +
    "\002\000\006\021\uffcd\046\215\001\002\000\022\004\110" +
    "\005\100\031\106\050\113\062\112\072\076\076\077\077" +
    "\104\001\002\000\006\017\ufff9\023\ufff9\001\002\000\006" +
    "\017\236\023\237\001\002\000\022\004\110\005\100\031" +
    "\106\050\113\062\112\072\076\076\077\077\104\001\002" +
    "\000\004\021\uffd7\001\002\000\006\017\ufffa\023\ufffa\001" +
    "\002\000\004\027\242\001\002\000\004\021\243\001\002" +
    "\000\052\004\uffaf\007\uffaf\014\uffaf\020\uffaf\025\uffaf\030" +
    "\uffaf\031\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf" +
    "\060\uffaf\064\uffaf\065\uffaf\066\uffaf\070\uffaf\073\uffaf\074" +
    "\uffaf\075\uffaf\001\002\000\052\004\uffb3\007\uffb3\014\uffb3" +
    "\020\uffb3\025\uffb3\030\uffb3\031\uffb3\053\uffb3\054\uffb3\055" +
    "\uffb3\056\uffb3\057\uffb3\060\uffb3\064\uffb3\065\uffb3\066\uffb3" +
    "\070\uffb3\073\uffb3\074\uffb3\075\uffb3\001\002\000\004\021" +
    "\246\001\002\000\052\004\uff8a\007\uff8a\014\uff8a\020\uff8a" +
    "\025\uff8a\030\uff8a\031\uff8a\053\uff8a\054\uff8a\055\uff8a\056" +
    "\uff8a\057\uff8a\060\uff8a\064\uff8a\065\uff8a\066\uff8a\070\uff8a" +
    "\073\uff8a\074\uff8a\075\uff8a\001\002\000\052\004\uffb5\007" +
    "\uffb5\014\uffb5\020\uffb5\025\uffb5\030\uffb5\031\uffb5\053\uffb5" +
    "\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\064\uffb5\065" +
    "\uffb5\066\uffb5\070\uffb5\073\uffb5\074\uffb5\075\uffb5\001\002" +
    "\000\004\021\251\001\002\000\052\004\uff8c\007\uff8c\014" +
    "\uff8c\020\uff8c\025\uff8c\030\uff8c\031\uff8c\053\uff8c\054\uff8c" +
    "\055\uff8c\056\uff8c\057\uff8c\060\uff8c\064\uff8c\065\uff8c\066" +
    "\uff8c\070\uff8c\073\uff8c\074\uff8c\075\uff8c\001\002\000\070" +
    "\004\uffca\005\uffca\007\uffca\014\uffca\020\uffca\025\uffca\026" +
    "\uffca\030\uffca\031\uffca\050\uffca\053\uffca\054\uffca\055\uffca" +
    "\056\uffca\057\uffca\060\uffca\062\uffca\064\uffca\065\uffca\066" +
    "\uffca\070\uffca\072\uffca\073\uffca\074\uffca\075\uffca\076\uffca" +
    "\077\uffca\001\002\000\004\021\255\001\002\000\052\004" +
    "\uffb6\007\uffb6\014\uffb6\020\uffb6\025\uffb6\030\uffb6\031\uffb6" +
    "\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\064" +
    "\uffb6\065\uffb6\066\uffb6\070\uffb6\073\uffb6\074\uffb6\075\uffb6" +
    "\001\002\000\052\004\uffb7\007\uffb7\014\uffb7\020\uffb7\025" +
    "\uffb7\030\uffb7\031\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7" +
    "\057\uffb7\060\uffb7\064\uffb7\065\uffb7\066\uffb7\070\uffb7\073" +
    "\uffb7\074\uffb7\075\uffb7\001\002\000\052\004\uffb8\007\uffb8" +
    "\014\uffb8\020\uffb8\025\uffb8\030\uffb8\031\uffb8\053\uffb8\054" +
    "\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\064\uffb8\065\uffb8" +
    "\066\uffb8\070\uffb8\073\uffb8\074\uffb8\075\uffb8\001\002\000" +
    "\004\004\260\001\002\000\004\021\261\001\002\000\052" +
    "\004\uff8e\007\uff8e\014\uff8e\020\uff8e\025\uff8e\030\uff8e\031" +
    "\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e" +
    "\064\uff8e\065\uff8e\066\uff8e\070\uff8e\073\uff8e\074\uff8e\075" +
    "\uff8e\001\002\000\032\004\147\005\100\020\137\022\233" +
    "\026\145\031\106\050\113\052\263\062\112\072\076\076" +
    "\077\077\104\001\002\000\004\026\264\001\002\000\004" +
    "\027\265\001\002\000\004\021\266\001\002\000\052\004" +
    "\uffb0\007\uffb0\014\uffb0\020\uffb0\025\uffb0\030\uffb0\031\uffb0" +
    "\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\064" +
    "\uffb0\065\uffb0\066\uffb0\070\uffb0\073\uffb0\074\uffb0\075\uffb0" +
    "\001\002\000\020\004\271\007\012\064\016\065\023\073" +
    "\014\074\017\075\013\001\002\000\004\004\271\001\002" +
    "\000\004\041\306\001\002\000\026\004\147\005\100\020" +
    "\137\026\145\031\106\050\113\062\112\072\076\076\077" +
    "\077\104\001\002\000\006\021\274\046\215\001\002\000" +
    "\006\030\276\031\275\001\002\000\004\031\304\001\002" +
    "\000\004\030\302\001\002\000\004\027\300\001\002\000" +
    "\004\024\025\001\002\000\052\004\uffb4\007\uffb4\014\uffb4" +
    "\020\uffb4\025\uffb4\030\uffb4\031\uffb4\053\uffb4\054\uffb4\055" +
    "\uffb4\056\uffb4\057\uffb4\060\uffb4\064\uffb4\065\uffb4\066\uffb4" +
    "\070\uffb4\073\uffb4\074\uffb4\075\uffb4\001\002\000\004\004" +
    "\303\001\002\000\004\027\uff89\001\002\000\004\004\305" +
    "\001\002\000\004\027\uff88\001\002\000\030\004\147\005" +
    "\100\020\137\022\233\026\145\031\106\050\113\062\112" +
    "\072\076\076\077\077\104\001\002\000\004\004\310\001" +
    "\002\000\004\021\311\001\002\000\052\004\uff8d\007\uff8d" +
    "\014\uff8d\020\uff8d\025\uff8d\030\uff8d\031\uff8d\053\uff8d\054" +
    "\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d\064\uff8d\065\uff8d" +
    "\066\uff8d\070\uff8d\073\uff8d\074\uff8d\075\uff8d\001\002\000" +
    "\052\004\uffbb\007\uffbb\014\uffbb\020\uffbb\025\uffbb\030\uffbb" +
    "\031\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060" +
    "\uffbb\064\uffbb\065\uffbb\066\uffbb\070\uffbb\073\uffbb\074\uffbb" +
    "\075\uffbb\001\002\000\054\002\uffbd\004\uffbd\007\uffbd\014" +
    "\uffbd\020\uffbd\025\uffbd\030\uffbd\031\uffbd\053\uffbd\054\uffbd" +
    "\055\uffbd\056\uffbd\057\uffbd\060\uffbd\064\uffbd\065\uffbd\066" +
    "\uffbd\070\uffbd\073\uffbd\074\uffbd\075\uffbd\001\002\000\004" +
    "\024\025\001\002\000\004\002\ufffe\001\002\000\006\017" +
    "\ufffb\027\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\006\002\005\004\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\017\006\020\030\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\003\057\010" +
    "\052\021\055\025\054\026\026\035\036\040\034\041\041" +
    "\042\032\044\044\045\035\046\043\047\030\056\025\057" +
    "\046\060\047\001\001\000\002\001\001\000\040\003\057" +
    "\010\052\021\055\025\054\035\036\040\034\041\041\042" +
    "\032\044\044\045\035\046\311\047\030\056\025\057\046" +
    "\060\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\054\255" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\013" +
    "\101\033\104\043\102\052\106\053\110\055\252\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\247\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\243\001" +
    "\001\000\004\060\223\001\001\000\004\054\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\064\001" +
    "\001\000\004\005\073\001\001\000\010\003\017\006\066" +
    "\030\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\017\030\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\013\101\033\104\043" +
    "\102\052\106\053\110\055\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\012\121\013\101\033\104" +
    "\043\102\052\106\053\110\055\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\013\101\015\142\016\141\017\134\020\135\033\145\043" +
    "\102\051\140\052\143\053\110\055\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\013" +
    "\101\015\213\033\145\043\102\052\106\053\110\055\211" +
    "\001\001\000\012\007\172\022\175\023\166\024\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\013\101\015\151\016\150\017" +
    "\147\033\145\043\102\052\106\053\110\055\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\013\101\033\104\036\205\043\102" +
    "\052\106\053\110\055\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\013\101\014\201\033\104\043\102\052\106\053\110\055" +
    "\200\001\001\000\002\001\001\000\016\013\101\033\104" +
    "\043\102\052\106\053\110\055\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\202" +
    "\001\001\000\016\013\101\033\104\043\102\052\106\053" +
    "\110\055\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\206\001\001\000\016\013\101\033\104\043" +
    "\102\052\106\053\110\055\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\166\001\001\000\020\013" +
    "\101\015\151\033\145\043\102\052\106\053\110\055\211" +
    "\001\001\000\002\001\001\000\016\013\101\033\104\043" +
    "\102\052\106\053\110\055\217\001\001\000\004\005\216" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\013" +
    "\101\033\104\043\102\052\106\053\110\055\221\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\013\101\015\142" +
    "\016\141\017\134\020\231\033\145\037\230\043\102\051" +
    "\140\052\143\053\110\055\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\013\101\027" +
    "\234\033\104\043\102\052\106\053\110\055\233\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\013\101\033" +
    "\104\043\102\052\106\053\110\055\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\013\101" +
    "\015\142\016\141\017\134\020\231\033\145\037\230\043" +
    "\102\051\140\052\143\053\110\055\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\267\025\271\060\047\001\001\000\004" +
    "\060\223\001\001\000\002\001\001\000\030\013\101\015" +
    "\142\016\141\017\134\020\272\033\145\043\102\051\140" +
    "\052\143\053\110\055\137\001\001\000\002\001\001\000" +
    "\004\050\276\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\300\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\013\101\015\142\016\141\017" +
    "\134\020\231\033\145\037\230\043\102\051\140\052\143" +
    "\053\110\055\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\314\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

//Codigo de usuario
    String tmp="";

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= main 
            {
              Object RESULT =null;
		
                    System.out.println("La sintaxis de su programa es correcta");
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main ::= KEYWORDINT KEYWORDMAIN PARENIZQ PARENDER bloquecodigo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main ::= KEYWORDINT KEYWORDMAIN PARENIZQ parametros PARENDER bloquecodigo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // parametros ::= parametros COMA parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parametro ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametrosList ::= parametrosList COMA valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosList",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parametrosList ::= valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosList",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= KEYWORDFLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= KEYWORDREAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= KEYWORDBOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= KEYWORDARRAY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo ::= KEYWORDINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo ::= KEYWORDSTRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // literal ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // literal ::= string 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // literal ::= boolean 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // literal ::= KEYWORDNULL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // numero ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // numero ::= RESTA ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // numero ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // numero ::= RESTA FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // diferente ::= NEGACION ASIGNA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("diferente",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // boolean ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // boolean ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // literales ::= literales literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // literales ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // caracteres ::= caracteres CARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("caracteres",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // caracteres ::= CARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("caracteres",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // keyword ::= KEYWORDSTRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // keyword ::= KEYWORDINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // keyword ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // keyword ::= BREAK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // keyword ::= IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // keyword ::= ELSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // keyword ::= ELIF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // keyword ::= FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametros_funcion ::= PARENIZQ parametros PARENDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_funcion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametros_funcion ::= PARENIZQ PARENDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_funcion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // funcion ::= KEYWORDFUNCTION IDENTIFICADOR parametros_funcion bloquecodigo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // string ::= COMILLA caracteres COMILLA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("string",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // arregloestatico ::= ABRECORCHETE parametrosList CIERRACORCHETE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloestatico",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operadorRelacional ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operadorRelacional ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operadorRelacional ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operadorRelacional ::= MAYOROIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operadorRelacional ::= MENOROIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operadorRelacional ::= diferente 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operadorLogico ::= DISYUNCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operadorLogico ::= CONJUNCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declaraExp ::= tipo IDENTIFICADOR PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraExp",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // asignacionIden ::= IDENTIFICADOR ASIGNA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionIden",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // asignacionIden ::= IDENTIFICADOR ASIGNA arregloestatico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionIden",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // asignacreacexpre ::= tipo asignacionIden PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacreacexpre",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // asignacreacexpre ::= asignacionIden PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacreacexpre",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instruccion ::= asignacreacexpre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // instruccion ::= instruccionReturn 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // instruccion ::= instruccionIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // instruccion ::= instruccionFor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // instruccion ::= instruccionRead 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // instruccion ::= instruccionElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // instruccion ::= instruccionElif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // instruccion ::= instruccionBreak 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // instruccion ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // instruccion ::= instruccionPrint 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // instruccion ::= declaraExp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // instruccion ::= unarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // bloquecodigo ::= LLAVEIZQ instrucciones LLAVEDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquecodigo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // bloquecodigo ::= LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquecodigo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // instrucciones ::= instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bloqueIf ::= PARENIZQ expresion PARENDER bloquecodigo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueIf",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // instruccionIf ::= IF bloqueIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionIf",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // instruccionReturn ::= RETURN valor PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionReturn",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // instruccionReturn ::= RETURN PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionReturn",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // instruccionBreak ::= BREAK PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionBreak",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // instruccionFor ::= FOR PARENIZQ asignacreacexpre expresion PUNTOYCOMA forUpdate PARENDER bloquecodigo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionFor",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // instruccionElse ::= ELSE bloquecodigo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionElse",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // instruccionElif ::= ELIF bloqueIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionElif",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // instruccionPrint ::= PRINT PARENIZQ valor PARENDER PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionPrint",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // instruccionRead ::= IDENTIFICADOR ASIGNA READ PARENIZQ PARENDER PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionRead",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // instruccionRead ::= tipo IDENTIFICADOR ASIGNA READ PARENIZQ PARENDER PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionRead",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= expAritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= expRelacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= expLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= ejecutaFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= expTernaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operadorAritmetico ::= SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operadorAritmetico ::= RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operadorAritmetico ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operadorAritmetico ::= DIVMODULAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operadorAritmetico ::= MODULO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operadorAritmetico ::= DIVISION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expAritmetica ::= valor operadorAritmetico operacionesArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expAritmetica",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expAritmetica ::= PARENIZQ expAritmetica PARENDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expAritmetica",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operacionesArit ::= operacionesArit operadorAritmetico valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionesArit",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operacionesArit ::= valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionesArit",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expRelacional ::= valor operadorRelacional valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRelacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expRelacional ::= PARENIZQ expRelacional PARENDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRelacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expLogica ::= valor operadorLogico operacionesLogicas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLogica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expLogica ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLogica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expLogica ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLogica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operacionesLogicas ::= operacionesLogicas operadorLogico valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionesLogicas",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operacionesLogicas ::= valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionesLogicas",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expLogica ::= PARENIZQ expLogica PARENDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLogica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expLogica ::= NEGACION expLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLogica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expTernaria ::= expresion SIGNOPREGUNTA valor CONDTERNARIA valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expTernaria",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ejecutaFuncion ::= IDENTIFICADOR PARENIZQ valoresFuncion PARENDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejecutaFuncion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ejecutaFuncion ::= IDENTIFICADOR PARENIZQ PARENDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejecutaFuncion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // valor ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // valor ::= ejecutaFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // valoresFuncion ::= valoresFuncion COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresFuncion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // valoresFuncion ::= valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresFuncion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // unarios ::= SUMA SUMA IDENTIFICADOR PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unarios",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // unarios ::= RESTA RESTA IDENTIFICADOR PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unarios",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // unarios ::= NEGACION boolean PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unarios",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // unarios ::= NEGACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unarios",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // unarios ::= KEYWORDNOT IDENTIFICADOR PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unarios",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // forUpdate ::= SUMA SUMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forUpdate",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // forUpdate ::= RESTA RESTA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forUpdate",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
