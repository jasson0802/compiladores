
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\174\000\002\002\004\000\002\002\003\000\002\004" +
    "\007\000\002\004\010\000\002\006\005\000\002\006\003" +
    "\000\002\030\004\000\002\027\005\000\002\027\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\043\003\000\002\043\004\000\002\043\003\000" +
    "\002\043\004\000\002\007\004\000\002\053\003\000\002" +
    "\053\003\000\002\031\004\000\002\031\003\000\002\032" +
    "\004\000\002\032\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\011\005\000\002\011\004\000\002\010\006\000\002\013" +
    "\005\000\002\037\005\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\023\003\000\002\023\003\000\002" +
    "\047\005\000\002\060\005\000\002\060\005\000\002\060" +
    "\004\000\002\025\005\000\002\025\004\000\002\025\004" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\005\005" +
    "\000\002\005\004\000\002\026\004\000\002\026\003\000" +
    "\002\054\006\000\002\041\004\000\002\040\005\000\002" +
    "\040\004\000\002\056\004\000\002\045\012\000\002\042" +
    "\004\000\002\044\004\000\002\057\007\000\002\035\010" +
    "\000\002\035\011\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\016\005" +
    "\000\002\016\005\000\002\014\005\000\002\014\003\000" +
    "\002\017\005\000\002\017\005\000\002\015\005\000\002" +
    "\015\003\000\002\015\003\000\002\036\005\000\002\036" +
    "\003\000\002\015\005\000\002\015\004\000\002\051\007" +
    "\000\002\052\006\000\002\052\005\000\002\055\003\000" +
    "\002\055\003\000\002\055\003\000\002\012\005\000\002" +
    "\012\003\000\002\021\006\000\002\021\006\000\002\021" +
    "\005\000\002\021\003\000\002\021\005\000\002\050\005" +
    "\000\002\050\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\004\007\005\001\002\000\004\002\000\001" +
    "\002\000\004\071\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\026\011\001\002\000" +
    "\020\007\012\027\022\064\016\065\023\073\014\074\017" +
    "\075\013\001\002\000\006\003\ufff4\004\ufff4\001\002\000" +
    "\006\003\ufff3\004\ufff3\001\002\000\006\003\ufff7\004\ufff7" +
    "\001\002\000\006\017\ufffc\027\ufffc\001\002\000\006\003" +
    "\ufff6\004\ufff6\001\002\000\006\003\ufff8\004\ufff8\001\002" +
    "\000\004\004\315\001\002\000\006\017\072\027\313\001" +
    "\002\000\004\024\025\001\002\000\006\003\ufff5\004\ufff5" +
    "\001\002\000\004\002\uffff\001\002\000\054\003\050\004" +
    "\040\007\012\014\063\020\052\025\032\030\041\031\030" +
    "\053\043\054\034\055\062\056\060\057\053\060\046\064" +
    "\016\065\023\066\055\070\064\073\014\074\017\075\013" +
    "\001\002\000\054\003\uffc0\004\uffc0\007\uffc0\014\uffc0\020" +
    "\uffc0\025\uffc0\030\uffc0\031\uffc0\053\uffc0\054\uffc0\055\uffc0" +
    "\056\uffc0\057\uffc0\060\uffc0\064\uffc0\065\uffc0\066\uffc0\070" +
    "\uffc0\073\uffc0\074\uffc0\075\uffc0\001\002\000\054\003\050" +
    "\004\040\007\012\014\063\020\052\025\311\030\041\031" +
    "\030\053\043\054\034\055\062\056\060\057\053\060\046" +
    "\064\016\065\023\066\055\070\064\073\014\074\017\075" +
    "\013\001\002\000\004\031\306\001\002\000\054\003\uffbd" +
    "\004\uffbd\007\uffbd\014\uffbd\020\uffbd\025\uffbd\030\uffbd\031" +
    "\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd" +
    "\064\uffbd\065\uffbd\066\uffbd\070\uffbd\073\uffbd\074\uffbd\075" +
    "\uffbd\001\002\000\056\002\uffba\003\uffba\004\uffba\007\uffba" +
    "\014\uffba\020\uffba\025\uffba\030\uffba\031\uffba\053\uffba\054" +
    "\uffba\055\uffba\056\uffba\057\uffba\060\uffba\064\uffba\065\uffba" +
    "\066\uffba\070\uffba\073\uffba\074\uffba\075\uffba\001\002\000" +
    "\054\003\uffc2\004\uffc2\007\uffc2\014\uffc2\020\uffc2\025\uffc2" +
    "\030\uffc2\031\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057" +
    "\uffc2\060\uffc2\064\uffc2\065\uffc2\066\uffc2\070\uffc2\073\uffc2" +
    "\074\uffc2\075\uffc2\001\002\000\004\026\266\001\002\000" +
    "\054\003\uffc6\004\uffc6\007\uffc6\014\uffc6\020\uffc6\025\uffc6" +
    "\030\uffc6\031\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057" +
    "\uffc6\060\uffc6\064\uffc6\065\uffc6\066\uffc6\070\uffc6\073\uffc6" +
    "\074\uffc6\075\uffc6\001\002\000\054\003\uffc4\004\uffc4\007" +
    "\uffc4\014\uffc4\020\uffc4\025\uffc4\030\uffc4\031\uffc4\053\uffc4" +
    "\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\064\uffc4\065" +
    "\uffc4\066\uffc4\070\uffc4\073\uffc4\074\uffc4\075\uffc4\001\002" +
    "\000\054\003\uffc3\004\uffc3\007\uffc3\014\uffc3\020\uffc3\025" +
    "\uffc3\030\uffc3\031\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3" +
    "\057\uffc3\060\uffc3\064\uffc3\065\uffc3\066\uffc3\070\uffc3\073" +
    "\uffc3\074\uffc3\075\uffc3\001\002\000\004\041\261\001\002" +
    "\000\004\030\256\001\002\000\054\003\uffc5\004\uffc5\007" +
    "\uffc5\014\uffc5\020\uffc5\025\uffc5\030\uffc5\031\uffc5\053\uffc5" +
    "\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\064\uffc5\065" +
    "\uffc5\066\uffc5\070\uffc5\073\uffc5\074\uffc5\075\uffc5\001\002" +
    "\000\004\026\127\001\002\000\054\003\uffb8\004\uffb8\007" +
    "\uffb8\014\uffb8\020\uffb8\025\uffb8\030\uffb8\031\uffb8\053\uffb8" +
    "\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\064\uffb8\065" +
    "\uffb8\066\uffb8\070\uffb8\073\uffb8\074\uffb8\075\uffb8\001\002" +
    "\000\054\003\uffc1\004\uffc1\007\uffc1\014\uffc1\020\uffc1\025" +
    "\uffc1\030\uffc1\031\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1" +
    "\057\uffc1\060\uffc1\064\uffc1\065\uffc1\066\uffc1\070\uffc1\073" +
    "\uffc1\074\uffc1\075\uffc1\001\002\000\024\004\111\005\102" +
    "\006\077\021\253\031\107\050\113\072\100\076\101\077" +
    "\105\001\002\000\054\003\uffbe\004\uffbe\007\uffbe\014\uffbe" +
    "\020\uffbe\025\uffbe\030\uffbe\031\uffbe\053\uffbe\054\uffbe\055" +
    "\uffbe\056\uffbe\057\uffbe\060\uffbe\064\uffbe\065\uffbe\066\uffbe" +
    "\070\uffbe\073\uffbe\074\uffbe\075\uffbe\001\002\000\004\021" +
    "\251\001\002\000\004\021\250\001\002\000\060\003\uff89" +
    "\004\uff89\007\uff89\014\uff89\020\uff89\025\uff89\030\uff89\031" +
    "\uff89\053\uff89\054\uff89\055\uff89\056\uff89\057\uff89\060\uff89" +
    "\064\uff89\065\uff89\066\uff89\070\uff89\073\uff89\074\uff89\075" +
    "\uff89\076\101\077\105\001\002\000\004\021\245\001\002" +
    "\000\054\003\uffbf\004\uffbf\007\uffbf\014\uffbf\020\uffbf\025" +
    "\uffbf\030\uffbf\031\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf" +
    "\057\uffbf\060\uffbf\064\uffbf\065\uffbf\066\uffbf\070\uffbf\073" +
    "\uffbf\074\uffbf\075\uffbf\001\002\000\004\004\243\001\002" +
    "\000\054\003\uffc7\004\uffc7\007\uffc7\014\uffc7\020\uffc7\025" +
    "\uffc7\030\uffc7\031\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7" +
    "\057\uffc7\060\uffc7\064\uffc7\065\uffc7\066\uffc7\070\uffc7\073" +
    "\uffc7\074\uffc7\075\uffc7\001\002\000\054\003\uffbc\004\uffbc" +
    "\007\uffbc\014\uffbc\020\uffbc\025\uffbc\030\uffbc\031\uffbc\053" +
    "\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\064\uffbc" +
    "\065\uffbc\066\uffbc\070\uffbc\073\uffbc\074\uffbc\075\uffbc\001" +
    "\002\000\004\024\025\001\002\000\006\003\217\004\220" +
    "\001\002\000\004\026\127\001\002\000\004\026\076\001" +
    "\002\000\004\004\065\001\002\000\004\026\067\001\002" +
    "\000\004\024\025\001\002\000\020\007\012\027\071\064" +
    "\016\065\023\073\014\074\017\075\013\001\002\000\006" +
    "\017\072\027\073\001\002\000\004\024\uffda\001\002\000" +
    "\016\007\012\064\016\065\023\073\014\074\017\075\013" +
    "\001\002\000\004\024\uffdb\001\002\000\006\017\ufffd\027" +
    "\ufffd\001\002\000\054\003\uffd9\004\uffd9\007\uffd9\014\uffd9" +
    "\020\uffd9\025\uffd9\030\uffd9\031\uffd9\053\uffd9\054\uffd9\055" +
    "\uffd9\056\uffd9\057\uffd9\060\uffd9\064\uffd9\065\uffd9\066\uffd9" +
    "\070\uffd9\073\uffd9\074\uffd9\075\uffd9\001\002\000\022\004" +
    "\111\005\102\006\077\031\107\050\113\072\100\076\101" +
    "\077\105\001\002\000\052\015\ufff1\016\ufff1\017\ufff1\020" +
    "\ufff1\021\ufff1\023\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1" +
    "\033\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\042\ufff1\043" +
    "\ufff1\044\ufff1\045\ufff1\046\ufff1\001\002\000\052\015\uffef" +
    "\016\uffef\017\uffef\020\uffef\021\uffef\023\uffef\027\uffef\030" +
    "\uffef\031\uffef\032\uffef\033\uffef\035\uffef\036\uffef\037\uffef" +
    "\040\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef\001" +
    "\002\000\052\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9" +
    "\023\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\035" +
    "\uffe9\036\uffe9\037\uffe9\040\uffe9\042\uffe9\043\uffe9\044\uffe9" +
    "\045\uffe9\046\uffe9\001\002\000\052\015\uffee\016\uffee\017" +
    "\uffee\020\uffee\021\uffee\023\uffee\027\uffee\030\uffee\031\uffee" +
    "\032\uffee\033\uffee\035\uffee\036\uffee\037\uffee\040\uffee\042" +
    "\uffee\043\uffee\044\uffee\045\uffee\046\uffee\001\002\000\004" +
    "\027\125\001\002\000\052\015\ufff2\016\ufff2\017\ufff2\020" +
    "\ufff2\021\ufff2\023\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2" +
    "\033\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\042\ufff2\043" +
    "\ufff2\044\ufff2\045\ufff2\046\ufff2\001\002\000\052\015\uffe8" +
    "\016\uffe8\017\uffe8\020\uffe8\021\uffe8\023\uffe8\027\uffe8\030" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\035\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\001" +
    "\002\000\036\015\uff90\016\uff90\017\uff90\021\uff90\023\uff90" +
    "\027\uff90\030\uff90\031\uff90\032\uff90\033\uff90\035\uff90\044" +
    "\uff90\045\uff90\046\uff90\001\002\000\006\005\124\050\123" +
    "\001\002\000\052\015\uff8f\016\uff8f\017\uff8f\020\uff8f\021" +
    "\uff8f\023\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f" +
    "\035\uff8f\036\uff8f\037\uff8f\040\uff8f\042\uff8f\043\uff8f\044" +
    "\uff8f\045\uff8f\046\uff8f\001\002\000\040\015\uff91\016\uff91" +
    "\017\uff91\021\uff91\023\uff91\026\114\027\uff91\030\uff91\031" +
    "\uff91\032\uff91\033\uff91\035\uff91\044\uff91\045\uff91\046\uff91" +
    "\001\002\000\052\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021" +
    "\ufff0\023\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0" +
    "\035\ufff0\036\ufff0\037\ufff0\040\ufff0\042\ufff0\043\ufff0\044" +
    "\ufff0\045\ufff0\046\ufff0\001\002\000\052\015\uffec\016\uffec" +
    "\017\uffec\020\uffec\021\uffec\023\uffec\027\uffec\030\uffec\031" +
    "\uffec\032\uffec\033\uffec\035\uffec\036\uffec\037\uffec\040\uffec" +
    "\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\001\002\000" +
    "\024\004\111\005\102\006\077\027\117\031\107\050\113" +
    "\072\100\076\101\077\105\001\002\000\006\017\uff8d\027" +
    "\uff8d\001\002\000\006\017\120\027\121\001\002\000\052" +
    "\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92\023\uff92\027" +
    "\uff92\030\uff92\031\uff92\032\uff92\033\uff92\035\uff92\036\uff92" +
    "\037\uff92\040\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046" +
    "\uff92\001\002\000\004\004\122\001\002\000\052\015\uff93" +
    "\016\uff93\017\uff93\020\uff93\021\uff93\023\uff93\027\uff93\030" +
    "\uff93\031\uff93\032\uff93\033\uff93\035\uff93\036\uff93\037\uff93" +
    "\040\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93\001" +
    "\002\000\006\017\uff8e\027\uff8e\001\002\000\052\015\uffeb" +
    "\016\uffeb\017\uffeb\020\uffeb\021\uffeb\023\uffeb\027\uffeb\030" +
    "\uffeb\031\uffeb\032\uffeb\033\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\001" +
    "\002\000\052\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed" +
    "\023\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\035" +
    "\uffed\036\uffed\037\uffed\040\uffed\042\uffed\043\uffed\044\uffed" +
    "\045\uffed\046\uffed\001\002\000\004\021\126\001\002\000" +
    "\054\003\uffaf\004\uffaf\007\uffaf\014\uffaf\020\uffaf\025\uffaf" +
    "\030\uffaf\031\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057" +
    "\uffaf\060\uffaf\064\uffaf\065\uffaf\066\uffaf\070\uffaf\073\uffaf" +
    "\074\uffaf\075\uffaf\001\002\000\026\004\142\005\102\006" +
    "\077\020\133\026\141\031\107\050\113\072\100\076\101" +
    "\077\105\001\002\000\054\003\uffb0\004\uffb0\007\uffb0\014" +
    "\uffb0\020\uffb0\025\uffb0\030\uffb0\031\uffb0\053\uffb0\054\uffb0" +
    "\055\uffb0\056\uffb0\057\uffb0\060\uffb0\064\uffb0\065\uffb0\066" +
    "\uffb0\070\uffb0\073\uffb0\074\uffb0\075\uffb0\001\002\000\010" +
    "\021\uffab\027\uffab\046\uffab\001\002\000\006\027\212\046" +
    "\211\001\002\000\026\004\142\005\102\006\077\020\133" +
    "\026\207\031\107\050\113\072\100\076\101\077\105\001" +
    "\002\000\036\015\165\016\164\020\160\030\157\031\173" +
    "\032\152\033\156\035\161\036\162\037\153\040\154\042" +
    "\166\043\155\044\171\001\002\000\010\021\uffa8\027\uffa8" +
    "\046\uffa8\001\002\000\010\021\uffac\027\uffac\046\uffac\001" +
    "\002\000\010\021\uffaa\027\uffaa\046\uffaa\001\002\000\044" +
    "\015\uff8f\016\uff8f\020\uff8f\021\uffa9\027\uffa9\030\uff8f\031" +
    "\uff8f\032\uff8f\033\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f" +
    "\042\uff8f\043\uff8f\044\uff8f\046\uffa9\001\002\000\026\004" +
    "\142\005\102\006\077\020\133\026\141\031\107\050\113" +
    "\072\100\076\101\077\105\001\002\000\046\015\uff91\016" +
    "\uff91\020\uff91\021\uff99\026\114\027\uff99\030\uff91\031\uff91" +
    "\032\uff91\033\uff91\035\uff91\036\uff91\037\uff91\040\uff91\042" +
    "\uff91\043\uff91\044\uff91\046\uff99\001\002\000\044\015\uff90" +
    "\016\uff90\020\uff90\021\uff9a\027\uff9a\030\uff90\031\uff90\032" +
    "\uff90\033\uff90\035\uff90\036\uff90\037\uff90\040\uff90\042\uff90" +
    "\043\uff90\044\uff90\046\uff9a\001\002\000\004\027\151\001" +
    "\002\000\004\027\150\001\002\000\004\027\147\001\002" +
    "\000\010\021\uff96\027\uff96\046\uff96\001\002\000\010\021" +
    "\uffa0\027\uffa0\046\uffa0\001\002\000\010\021\uff9c\027\uff9c" +
    "\046\uff9c\001\002\000\022\004\uffa5\005\uffa5\006\uffa5\031" +
    "\uffa5\050\uffa5\072\uffa5\076\uffa5\077\uffa5\001\002\000\022" +
    "\004\uffd5\005\uffd5\006\uffd5\031\uffd5\050\uffd5\072\uffd5\076" +
    "\uffd5\077\uffd5\001\002\000\022\004\uffd4\005\uffd4\006\uffd4" +
    "\031\uffd4\050\uffd4\072\uffd4\076\uffd4\077\uffd4\001\002\000" +
    "\022\004\uffd2\005\uffd2\006\uffd2\031\uffd2\050\uffd2\072\uffd2" +
    "\076\uffd2\077\uffd2\001\002\000\022\004\uffa2\005\uffa2\006" +
    "\uffa2\031\uffa2\050\uffa2\072\uffa2\076\uffa2\077\uffa2\001\002" +
    "\000\022\004\uffa7\005\uffa7\006\uffa7\031\uffa7\050\uffa7\072" +
    "\uffa7\076\uffa7\077\uffa7\001\002\000\004\041\205\001\002" +
    "\000\022\004\uffa3\005\uffa3\006\uffa3\031\uffa3\050\uffa3\072" +
    "\uffa3\076\uffa3\077\uffa3\001\002\000\022\004\uffd6\005\uffd6" +
    "\006\uffd6\031\uffd6\050\uffd6\072\uffd6\076\uffd6\077\uffd6\001" +
    "\002\000\022\004\111\005\102\006\077\031\107\050\113" +
    "\072\100\076\101\077\105\001\002\000\022\004\uffcf\005" +
    "\uffcf\006\uffcf\031\uffcf\050\uffcf\072\uffcf\076\uffcf\077\uffcf" +
    "\001\002\000\022\004\uffd0\005\uffd0\006\uffd0\031\uffd0\050" +
    "\uffd0\072\uffd0\076\uffd0\077\uffd0\001\002\000\022\004\uffd3" +
    "\005\uffd3\006\uffd3\031\uffd3\050\uffd3\072\uffd3\076\uffd3\077" +
    "\uffd3\001\002\000\022\004\uffd1\005\uffd1\006\uffd1\031\uffd1" +
    "\050\uffd1\072\uffd1\076\uffd1\077\uffd1\001\002\000\022\004" +
    "\111\005\102\006\077\031\107\050\113\072\100\076\101" +
    "\077\105\001\002\000\022\004\uffa4\005\uffa4\006\uffa4\031" +
    "\uffa4\050\uffa4\072\uffa4\076\uffa4\077\uffa4\001\002\000\022" +
    "\004\111\005\102\006\077\031\107\050\113\072\100\076" +
    "\101\077\105\001\002\000\022\004\uffa6\005\uffa6\006\uffa6" +
    "\031\uffa6\050\uffa6\072\uffa6\076\uffa6\077\uffa6\001\002\000" +
    "\010\021\uff9d\027\uff9d\046\uff9d\001\002\000\024\021\uff9e" +
    "\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e\035\uff9e\044" +
    "\uff9e\046\uff9e\001\002\000\024\021\uffa1\027\uffa1\030\157" +
    "\031\173\032\152\033\156\035\161\044\171\046\uffa1\001" +
    "\002\000\022\004\111\005\102\006\077\031\107\050\113" +
    "\072\100\076\101\077\105\001\002\000\024\021\uff9f\027" +
    "\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\035\uff9f\044\uff9f" +
    "\046\uff9f\001\002\000\014\015\uff97\016\uff97\021\uff97\027" +
    "\uff97\046\uff97\001\002\000\014\015\165\016\164\021\uff9b" +
    "\027\uff9b\046\uff9b\001\002\000\022\004\111\005\102\006" +
    "\077\031\107\050\113\072\100\076\101\077\105\001\002" +
    "\000\014\015\uff98\016\uff98\021\uff98\027\uff98\046\uff98\001" +
    "\002\000\022\004\uffea\005\uffea\006\uffea\031\uffea\050\uffea" +
    "\072\uffea\076\uffea\077\uffea\001\002\000\006\015\165\016" +
    "\164\001\002\000\026\004\142\005\102\006\077\020\133" +
    "\026\207\031\107\050\113\072\100\076\101\077\105\001" +
    "\002\000\010\021\uff95\027\uff95\046\uff95\001\002\000\022" +
    "\004\111\005\102\006\077\031\107\050\113\072\100\076" +
    "\101\077\105\001\002\000\004\024\025\001\002\000\054" +
    "\003\uffb7\004\uffb7\007\uffb7\014\uffb7\020\uffb7\025\uffb7\030" +
    "\uffb7\031\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7" +
    "\060\uffb7\064\uffb7\065\uffb7\066\uffb7\070\uffb7\073\uffb7\074" +
    "\uffb7\075\uffb7\001\002\000\004\045\215\001\002\000\022" +
    "\004\111\005\102\006\077\031\107\050\113\072\100\076" +
    "\101\077\105\001\002\000\010\021\uff94\027\uff94\046\uff94" +
    "\001\002\000\004\021\241\001\002\000\006\021\223\041" +
    "\224\001\002\000\004\021\222\001\002\000\072\003\uffca" +
    "\004\uffca\005\uffca\006\uffca\007\uffca\014\uffca\020\uffca\025" +
    "\uffca\026\uffca\030\uffca\031\uffca\050\uffca\053\uffca\054\uffca" +
    "\055\uffca\056\uffca\057\uffca\060\uffca\064\uffca\065\uffca\066" +
    "\uffca\070\uffca\072\uffca\073\uffca\074\uffca\075\uffca\076\uffca" +
    "\077\uffca\001\002\000\054\003\uffce\004\uffce\007\uffce\014" +
    "\uffce\020\uffce\025\uffce\030\uffce\031\uffce\053\uffce\054\uffce" +
    "\055\uffce\056\uffce\057\uffce\060\uffce\064\uffce\065\uffce\066" +
    "\uffce\070\uffce\073\uffce\074\uffce\075\uffce\001\002\000\032" +
    "\004\142\005\102\006\077\020\133\022\230\026\141\031" +
    "\107\050\113\052\225\072\100\076\101\077\105\001\002" +
    "\000\004\026\236\001\002\000\004\021\uffcc\001\002\000" +
    "\006\021\uffcd\046\211\001\002\000\022\004\111\005\102" +
    "\006\077\031\107\050\113\072\100\076\101\077\105\001" +
    "\002\000\006\017\ufff9\023\ufff9\001\002\000\006\017\233" +
    "\023\234\001\002\000\022\004\111\005\102\006\077\031" +
    "\107\050\113\072\100\076\101\077\105\001\002\000\004" +
    "\021\uffd7\001\002\000\006\017\ufffa\023\ufffa\001\002\000" +
    "\004\027\237\001\002\000\004\021\240\001\002\000\054" +
    "\003\uffad\004\uffad\007\uffad\014\uffad\020\uffad\025\uffad\030" +
    "\uffad\031\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad" +
    "\060\uffad\064\uffad\065\uffad\066\uffad\070\uffad\073\uffad\074" +
    "\uffad\075\uffad\001\002\000\004\021\uffcb\001\002\000\054" +
    "\003\uffb1\004\uffb1\007\uffb1\014\uffb1\020\uffb1\025\uffb1\030" +
    "\uffb1\031\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1" +
    "\060\uffb1\064\uffb1\065\uffb1\066\uffb1\070\uffb1\073\uffb1\074" +
    "\uffb1\075\uffb1\001\002\000\004\021\244\001\002\000\054" +
    "\003\uff88\004\uff88\007\uff88\014\uff88\020\uff88\025\uff88\030" +
    "\uff88\031\uff88\053\uff88\054\uff88\055\uff88\056\uff88\057\uff88" +
    "\060\uff88\064\uff88\065\uff88\066\uff88\070\uff88\073\uff88\074" +
    "\uff88\075\uff88\001\002\000\054\003\uffb3\004\uffb3\007\uffb3" +
    "\014\uffb3\020\uffb3\025\uffb3\030\uffb3\031\uffb3\053\uffb3\054" +
    "\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\064\uffb3\065\uffb3" +
    "\066\uffb3\070\uffb3\073\uffb3\074\uffb3\075\uffb3\001\002\000" +
    "\004\021\247\001\002\000\054\003\uff8a\004\uff8a\007\uff8a" +
    "\014\uff8a\020\uff8a\025\uff8a\030\uff8a\031\uff8a\053\uff8a\054" +
    "\uff8a\055\uff8a\056\uff8a\057\uff8a\060\uff8a\064\uff8a\065\uff8a" +
    "\066\uff8a\070\uff8a\073\uff8a\074\uff8a\075\uff8a\001\002\000" +
    "\072\003\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\014\uffc9" +
    "\020\uffc9\025\uffc9\026\uffc9\030\uffc9\031\uffc9\050\uffc9\053" +
    "\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\064\uffc9" +
    "\065\uffc9\066\uffc9\070\uffc9\072\uffc9\073\uffc9\074\uffc9\075" +
    "\uffc9\076\uffc9\077\uffc9\001\002\000\074\003\uffc8\004\uffc8" +
    "\005\uffc8\006\uffc8\007\uffc8\014\uffc8\020\uffc8\021\uffcb\025" +
    "\uffc8\026\uffc8\030\uffc8\031\uffc8\050\uffc8\053\uffc8\054\uffc8" +
    "\055\uffc8\056\uffc8\057\uffc8\060\uffc8\064\uffc8\065\uffc8\066" +
    "\uffc8\070\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8" +
    "\077\uffc8\001\002\000\004\021\254\001\002\000\054\003" +
    "\uffb4\004\uffb4\007\uffb4\014\uffb4\020\uffb4\025\uffb4\030\uffb4" +
    "\031\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060" +
    "\uffb4\064\uffb4\065\uffb4\066\uffb4\070\uffb4\073\uffb4\074\uffb4" +
    "\075\uffb4\001\002\000\054\003\uffb5\004\uffb5\007\uffb5\014" +
    "\uffb5\020\uffb5\025\uffb5\030\uffb5\031\uffb5\053\uffb5\054\uffb5" +
    "\055\uffb5\056\uffb5\057\uffb5\060\uffb5\064\uffb5\065\uffb5\066" +
    "\uffb5\070\uffb5\073\uffb5\074\uffb5\075\uffb5\001\002\000\054" +
    "\003\uffb6\004\uffb6\007\uffb6\014\uffb6\020\uffb6\025\uffb6\030" +
    "\uffb6\031\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6" +
    "\060\uffb6\064\uffb6\065\uffb6\066\uffb6\070\uffb6\073\uffb6\074" +
    "\uffb6\075\uffb6\001\002\000\004\004\257\001\002\000\004" +
    "\021\260\001\002\000\054\003\uff8c\004\uff8c\007\uff8c\014" +
    "\uff8c\020\uff8c\025\uff8c\030\uff8c\031\uff8c\053\uff8c\054\uff8c" +
    "\055\uff8c\056\uff8c\057\uff8c\060\uff8c\064\uff8c\065\uff8c\066" +
    "\uff8c\070\uff8c\073\uff8c\074\uff8c\075\uff8c\001\002\000\032" +
    "\004\142\005\102\006\077\020\133\022\230\026\141\031" +
    "\107\050\113\052\262\072\100\076\101\077\105\001\002" +
    "\000\004\026\263\001\002\000\004\027\264\001\002\000" +
    "\004\021\265\001\002\000\054\003\uffae\004\uffae\007\uffae" +
    "\014\uffae\020\uffae\025\uffae\030\uffae\031\uffae\053\uffae\054" +
    "\uffae\055\uffae\056\uffae\057\uffae\060\uffae\064\uffae\065\uffae" +
    "\066\uffae\070\uffae\073\uffae\074\uffae\075\uffae\001\002\000" +
    "\022\003\050\004\270\007\012\064\016\065\023\073\014" +
    "\074\017\075\013\001\002\000\006\003\217\004\270\001" +
    "\002\000\004\041\305\001\002\000\026\004\142\005\102" +
    "\006\077\020\133\026\141\031\107\050\113\072\100\076" +
    "\101\077\105\001\002\000\006\021\273\046\211\001\002" +
    "\000\006\030\275\031\274\001\002\000\004\031\303\001" +
    "\002\000\004\030\301\001\002\000\004\027\277\001\002" +
    "\000\004\024\025\001\002\000\054\003\uffb2\004\uffb2\007" +
    "\uffb2\014\uffb2\020\uffb2\025\uffb2\030\uffb2\031\uffb2\053\uffb2" +
    "\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\064\uffb2\065" +
    "\uffb2\066\uffb2\070\uffb2\073\uffb2\074\uffb2\075\uffb2\001\002" +
    "\000\004\004\302\001\002\000\004\027\uff87\001\002\000" +
    "\004\004\304\001\002\000\004\027\uff86\001\002\000\030" +
    "\004\142\005\102\006\077\020\133\022\230\026\141\031" +
    "\107\050\113\072\100\076\101\077\105\001\002\000\004" +
    "\004\307\001\002\000\004\021\310\001\002\000\054\003" +
    "\uff8b\004\uff8b\007\uff8b\014\uff8b\020\uff8b\025\uff8b\030\uff8b" +
    "\031\uff8b\053\uff8b\054\uff8b\055\uff8b\056\uff8b\057\uff8b\060" +
    "\uff8b\064\uff8b\065\uff8b\066\uff8b\070\uff8b\073\uff8b\074\uff8b" +
    "\075\uff8b\001\002\000\056\002\uffbb\003\uffbb\004\uffbb\007" +
    "\uffbb\014\uffbb\020\uffbb\025\uffbb\030\uffbb\031\uffbb\053\uffbb" +
    "\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\064\uffbb\065" +
    "\uffbb\066\uffbb\070\uffbb\073\uffbb\074\uffbb\075\uffbb\001\002" +
    "\000\054\003\uffb9\004\uffb9\007\uffb9\014\uffb9\020\uffb9\025" +
    "\uffb9\030\uffb9\031\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9" +
    "\057\uffb9\060\uffb9\064\uffb9\065\uffb9\066\uffb9\070\uffb9\073" +
    "\uffb9\074\uffb9\075\uffb9\001\002\000\004\024\025\001\002" +
    "\000\004\002\ufffe\001\002\000\006\017\ufffb\027\ufffb\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\006\002\005\004\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\017\006\020\030\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\003\060\010" +
    "\053\021\056\025\055\026\026\035\036\040\034\041\041" +
    "\042\032\044\044\045\035\046\043\047\030\056\025\057" +
    "\046\060\050\001\001\000\002\001\001\000\040\003\060" +
    "\010\053\021\056\025\055\035\036\040\034\041\041\042" +
    "\032\044\044\045\035\046\311\047\030\056\025\057\046" +
    "\060\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\054\254" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\033" +
    "\105\043\103\052\107\053\111\055\251\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\241\001\001\000\004\060\220\001\001\000\004\054\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\065\001\001\000\004\005\074\001\001\000\010\003\017" +
    "\006\067\030\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\017\030\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\033\105\043" +
    "\103\052\107\053\111\055\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\012\115" +
    "\033\105\043\103\052\107\053\111\055\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\015\136\016\135\017\130\020\131\033\142\043" +
    "\103\051\134\052\137\053\111\055\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\015" +
    "\207\033\142\043\103\052\107\053\111\055\205\001\001" +
    "\000\012\007\166\022\171\023\162\024\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\015\145\016\144\017\143\033\142\043" +
    "\103\052\107\053\111\055\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\033\105\036\201\043\103\052\107\053\111\055\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\014\175\033\105\043\103" +
    "\052\107\053\111\055\174\001\001\000\002\001\001\000" +
    "\014\033\105\043\103\052\107\053\111\055\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\176\001\001\000\014\033\105\043\103\052\107" +
    "\053\111\055\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\202\001\001\000\014\033\105\043\103" +
    "\052\107\053\111\055\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\162\001\001\000\016\015\145" +
    "\033\142\043\103\052\107\053\111\055\205\001\001\000" +
    "\002\001\001\000\014\033\105\043\103\052\107\053\111" +
    "\055\213\001\001\000\004\005\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\033\105\043\103\052\107" +
    "\053\111\055\215\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\015\136\016\135\017\130\020" +
    "\226\033\142\037\225\043\103\051\134\052\137\053\111" +
    "\055\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\027\231\033\105\043\103\052\107" +
    "\053\111\055\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\033\105\043\103\052\107\053\111\055\234" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\015\136\016" +
    "\135\017\130\020\226\033\142\037\225\043\103\051\134" +
    "\052\137\053\111\055\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\266\025\270\060\050\001\001\000\004\060\220\001" +
    "\001\000\002\001\001\000\026\015\136\016\135\017\130" +
    "\020\271\033\142\043\103\051\134\052\137\053\111\055" +
    "\133\001\001\000\002\001\001\000\004\050\275\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\277\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\015\136\016\135\017\130\020\226\033\142\037\225" +
    "\043\103\051\134\052\137\053\111\055\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\313\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    
    public void syntax_error(Symbol s){
        System.out.println("---->  Error de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("---->  Error fatal. La sintaxis es invalida: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

//Codigo de usuario
    String tmp="";

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= main 
            {
              Object RESULT =null;
		
                    System.out.println("La sintaxis de su programa es correcta");
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main ::= KEYWORDINT KEYWORDMAIN PARENIZQ PARENDER bloquecodigo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main ::= KEYWORDINT KEYWORDMAIN PARENIZQ parametros PARENDER bloquecodigo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // parametros ::= parametros COMA parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parametro ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametrosList ::= parametrosList COMA valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosList",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parametrosList ::= valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosList",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= KEYWORDFLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= KEYWORDREAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= KEYWORDBOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= KEYWORDARRAY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo ::= KEYWORDINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo ::= KEYWORDSTRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // literal ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // literal ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // literal ::= boolean 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // literal ::= KEYWORDNULL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // numero ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // numero ::= RESTA ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // numero ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // numero ::= RESTA FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // diferente ::= NEGACION ASIGNA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("diferente",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // boolean ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // boolean ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // literales ::= literales literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // literales ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // caracteres ::= caracteres CARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("caracteres",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // caracteres ::= CARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("caracteres",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // keyword ::= KEYWORDSTRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // keyword ::= KEYWORDINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // keyword ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // keyword ::= BREAK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // keyword ::= IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // keyword ::= ELSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // keyword ::= ELIF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // keyword ::= FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyword",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametros_funcion ::= PARENIZQ parametros PARENDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_funcion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametros_funcion ::= PARENIZQ PARENDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_funcion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // funcion ::= KEYWORDFUNCTION IDENTIFICADOR parametros_funcion bloquecodigo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // string ::= COMILLA caracteres COMILLA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("string",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // arregloestatico ::= ABRECORCHETE parametrosList CIERRACORCHETE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloestatico",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operadorRelacional ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operadorRelacional ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operadorRelacional ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operadorRelacional ::= MAYOROIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operadorRelacional ::= MENOROIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operadorRelacional ::= diferente 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operadorLogico ::= DISYUNCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operadorLogico ::= CONJUNCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declaraExp ::= tipo IDENTIFICADOR PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraExp",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // asignacionIden ::= IDENTIFICADOR ASIGNA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionIden",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // asignacionIden ::= IDENTIFICADOR ASIGNA arregloestatico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionIden",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // asignacionIden ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionIden",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // asignacreacexpre ::= tipo asignacionIden PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacreacexpre",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // asignacreacexpre ::= asignacionIden PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacreacexpre",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // asignacreacexpre ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacreacexpre",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // instruccion ::= asignacreacexpre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // instruccion ::= instruccionReturn 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // instruccion ::= instruccionIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // instruccion ::= instruccionFor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // instruccion ::= instruccionRead 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // instruccion ::= instruccionElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // instruccion ::= instruccionElif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // instruccion ::= instruccionBreak 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // instruccion ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // instruccion ::= instruccionPrint 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // instruccion ::= declaraExp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // instruccion ::= unarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // bloquecodigo ::= LLAVEIZQ instrucciones LLAVEDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquecodigo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bloquecodigo ::= LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloquecodigo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // instrucciones ::= instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // bloqueIf ::= PARENIZQ expresion PARENDER bloquecodigo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueIf",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // instruccionIf ::= IF bloqueIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionIf",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // instruccionReturn ::= RETURN valor PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionReturn",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // instruccionReturn ::= RETURN PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionReturn",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // instruccionBreak ::= BREAK PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionBreak",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // instruccionFor ::= FOR PARENIZQ asignacreacexpre expresion PUNTOYCOMA forUpdate PARENDER bloquecodigo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionFor",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // instruccionElse ::= ELSE bloquecodigo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionElse",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // instruccionElif ::= ELIF bloqueIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionElif",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // instruccionPrint ::= PRINT PARENIZQ valor PARENDER PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionPrint",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // instruccionRead ::= IDENTIFICADOR ASIGNA READ PARENIZQ PARENDER PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionRead",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // instruccionRead ::= tipo IDENTIFICADOR ASIGNA READ PARENIZQ PARENDER PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionRead",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= expAritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= expRelacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= expLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= ejecutaFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= expTernaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operadorAritmetico ::= SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operadorAritmetico ::= RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operadorAritmetico ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operadorAritmetico ::= DIVMODULAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operadorAritmetico ::= MODULO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operadorAritmetico ::= DIVISION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expAritmetica ::= valor operadorAritmetico operacionesArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expAritmetica",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expAritmetica ::= PARENIZQ expAritmetica PARENDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expAritmetica",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operacionesArit ::= operacionesArit operadorAritmetico valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionesArit",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operacionesArit ::= valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionesArit",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expRelacional ::= valor operadorRelacional valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRelacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expRelacional ::= PARENIZQ expRelacional PARENDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRelacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expLogica ::= valor operadorLogico operacionesLogicas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLogica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expLogica ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLogica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expLogica ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLogica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operacionesLogicas ::= operacionesLogicas operadorLogico valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionesLogicas",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operacionesLogicas ::= valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionesLogicas",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expLogica ::= PARENIZQ expLogica PARENDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLogica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expLogica ::= NEGACION expLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLogica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expTernaria ::= expresion SIGNOPREGUNTA valor CONDTERNARIA valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expTernaria",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ejecutaFuncion ::= IDENTIFICADOR PARENIZQ valoresFuncion PARENDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejecutaFuncion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ejecutaFuncion ::= IDENTIFICADOR PARENIZQ PARENDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejecutaFuncion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // valor ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // valor ::= ejecutaFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // valoresFuncion ::= valoresFuncion COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresFuncion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // valoresFuncion ::= valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresFuncion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // unarios ::= SUMA SUMA IDENTIFICADOR PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unarios",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // unarios ::= RESTA RESTA IDENTIFICADOR PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unarios",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // unarios ::= NEGACION boolean PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unarios",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // unarios ::= NEGACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unarios",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // unarios ::= KEYWORDNOT IDENTIFICADOR PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unarios",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // forUpdate ::= SUMA SUMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forUpdate",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // forUpdate ::= RESTA RESTA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forUpdate",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
