package analizadores;

import java_cup.runtime.*;

//PARSER 
parser code
{://Codigo visible
    
    public void syntax_error(Symbol s){
        System.out.println("---->  Error de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("---->  Error fatal. La sintaxis es invalida: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

:}

action code
{://Codigo de usuario
    String tmp="";
:}

terminal String IDENTIFICADOR,ENTERO,CADENA,KEYWORDINT,CHAR1,PUB,PRI,VOI, PRINT;
terminal DISYUNCION,CONJUNCION,COMA,NEGACION,PUNTOYCOMA,ABRECORCHETE,CIERRACORCHETE,
        LLAVEIZQ,LLAVEDER,PARENIZQ,PARENDER,SUMA,RESTA,MULTIPLICACION,DIVISION ,POTENCIA,
        MODULO,MAYOR,MENOR,IGUAL ,ASIGNA,MAYOROIGUAL,MENOROIGUAL,DIVMODULAR,
        CONDTERNARIA, SIGNOPREGUNTA, NUMERAL,FLOAT,CARACTER, READ;

terminal  IF, FOR, ELIF, ELSE, BREAK, RETURN, ABSTRACT,
          COMILLA,DIGITOS,KEYWORDBOOLEAN, KEYWORDARRAY, KEYWORDNOT,
          keywordInt, KEYWORDFUNCTION, KEYWORDMAIN, KEYWORDNULL, KEYWORDREAL, KEYWORDFLOAT, KEYWORDSTRING, TRUE, FALSE;

nonterminal  inicio,tipo,main, bloquecodigo, parametros, diferente;
nonterminal funcion,parametros_funcion,valoresFuncion, string, operacionesArit,
            expLogica,expAritmetica,expRelacional,expresion,unarios,operadorRelacional,
            operadorLogico,operadorAritmetico,asignacreacexpre,instrucciones,parametrosList, 
            parametro,literales,caracteres,literal,keyword, instruccionRead, operacionesLogicas,
            arregloestatico,instruccionReturn,instruccionIf, instruccionElse, numero,
            instruccionElif,instruccionFor,instruccion, declaraExp, forUpdate, expTernaria,
            ejecutaFuncion, boolean, bloqueIf, valor, instruccionBreak, instruccionPrint, asignacionIden, expAritmeticaParen;


//agregamos la precedencia

//precedence left MAS, MENOS;
//precedence left POR, DIV; 


start with inicio;

inicio ::= main
				{:
                    System.out.println("La sintaxis de su programa es correcta");
               :}
;

main ::= 
    KEYWORDINT KEYWORDMAIN PARENIZQ PARENDER bloquecodigo 
    |
    KEYWORDINT KEYWORDMAIN PARENIZQ parametros PARENDER bloquecodigo
    ;

parametros ::= 
    parametros COMA parametro | parametro 
    ; 

parametro ::= 
    tipo IDENTIFICADOR 
    ;

parametrosList ::=
    parametrosList COMA valor | valor 
    ;   

tipo ::= 
    KEYWORDFLOAT | KEYWORDREAL | KEYWORDBOOLEAN| KEYWORDARRAY | KEYWORDINT | KEYWORDSTRING
    ;

literal ::= 
    numero | CADENA | boolean | KEYWORDNULL
    ;
    
numero ::=
	ENTERO | RESTA ENTERO | FLOAT | RESTA FLOAT;    
    
diferente ::= 
    NEGACION ASIGNA
    ;

boolean ::=
    TRUE | FALSE
    ;

literales ::=
    literales literal | literal 
    ; 

caracteres ::=
    caracteres CARACTER | CARACTER 
    ; 

keyword ::= 
    KEYWORDSTRING| KEYWORDINT | RETURN | BREAK | IF | ELSE | ELIF | FOR
    ;

parametros_funcion ::= 
    PARENIZQ parametros PARENDER
    |
    PARENIZQ PARENDER
    ;
     
funcion ::= 
     KEYWORDFUNCTION IDENTIFICADOR parametros_funcion bloquecodigo
     ;

string ::= 
    COMILLA caracteres COMILLA
    ;

arregloestatico ::=
    ABRECORCHETE parametrosList CIERRACORCHETE
    ;

operadorRelacional ::= 
     MAYOR|MENOR|IGUAL|MAYOROIGUAL|MENOROIGUAL|diferente
     ;

operadorLogico ::= 
     DISYUNCION | CONJUNCION
     ;

declaraExp ::= tipo IDENTIFICADOR PUNTOYCOMA;

asignacionIden ::= IDENTIFICADOR ASIGNA expresion | 
                   IDENTIFICADOR ASIGNA arregloestatico |
                   error PUNTOYCOMA
                   ;

asignacreacexpre ::= 
     tipo asignacionIden PUNTOYCOMA
     |
     asignacionIden PUNTOYCOMA
     | error PUNTOYCOMA
     ;

instruccion ::= 
    (asignacreacexpre | instruccionReturn| instruccionIf | instruccionFor| instruccionRead |
    instruccionElse|instruccionElif | instruccionBreak | funcion | instruccionPrint | declaraExp | unarios)
    ;

bloquecodigo ::= 
    LLAVEIZQ instrucciones LLAVEDER
    |
    LLAVEIZQ LLAVEDER
    ;

instrucciones ::=
    instrucciones instruccion | instruccion
    ;

bloqueIf ::= 
    PARENIZQ expresion PARENDER bloquecodigo;

instruccionIf ::= 
     IF bloqueIf
     ;

instruccionReturn ::= 
     RETURN valor PUNTOYCOMA
     |
     RETURN PUNTOYCOMA
     ; 

instruccionBreak ::= 
     BREAK PUNTOYCOMA
     ;

instruccionFor ::= 
     FOR PARENIZQ asignacreacexpre expresion PUNTOYCOMA forUpdate PARENDER bloquecodigo
     ;
     
instruccionFuncion ::= 
	KEYWORDFUNCTION PARENIZQ PARENDER bloquecodigo 
    |
    KEYWORDFUNCTION PARENIZQ parametros PARENDER bloquecodigo
;


instruccionElse ::= 
     ELSE bloquecodigo
     ;

instruccionElif ::= 
     ELIF bloqueIf
     ;

instruccionPrint ::=
    PRINT PARENIZQ valor PARENDER PUNTOYCOMA;
    
instruccionRead ::=
    IDENTIFICADOR ASIGNA READ PARENIZQ PARENDER PUNTOYCOMA
    |
	tipo IDENTIFICADOR ASIGNA READ PARENIZQ PARENDER PUNTOYCOMA;

expresion ::= 
     expAritmetica | expRelacional | expLogica | ejecutaFuncion | expTernaria
     ;

operadorAritmetico::=
    SUMA|RESTA|MULTIPLICACION|DIVMODULAR|MODULO|DIVISION
    ;

expAritmetica ::= 
     valor
     operadorAritmetico 
     operacionesArit
     |
     PARENIZQ expAritmetica PARENDER
     ;
     
operacionesArit ::= 
    operacionesArit operadorAritmetico valor | valor 
    ; 


expRelacional ::= 
      valor operadorRelacional valor
     ;

expRelacional ::= 
     PARENIZQ expRelacional PARENDER
     ;

expLogica ::= 
     valor
     operadorLogico
     operacionesLogicas
     | literal
     | IDENTIFICADOR
     ;
     
operacionesLogicas ::= 
    operacionesLogicas operadorLogico valor | valor 
    ; 

expLogica ::= 
    PARENIZQ expLogica PARENDER
    ;

expLogica ::= 
    NEGACION expLogica
    ;
    
expTernaria ::=
	expresion SIGNOPREGUNTA valor CONDTERNARIA valor;

ejecutaFuncion ::= 
     IDENTIFICADOR PARENIZQ valoresFuncion  PARENDER
     |
     IDENTIFICADOR PARENIZQ  PARENDER
     ;

valor ::= 
     IDENTIFICADOR|literal|ejecutaFuncion
     ;

valoresFuncion ::= 
     valoresFuncion COMA IDENTIFICADOR |
     valor
     ;

unarios ::=
     SUMA SUMA IDENTIFICADOR PUNTOYCOMA |
     RESTA RESTA IDENTIFICADOR PUNTOYCOMA |
     NEGACION boolean PUNTOYCOMA	|
     (NEGACION | KEYWORDNOT) IDENTIFICADOR PUNTOYCOMA
     ;
     

forUpdate ::=
     SUMA SUMA IDENTIFICADOR |
     RESTA RESTA IDENTIFICADOR;